---
description: Sp√©cification g√©n√©rale du projet hermes2022-to-archimate
alwaysApply: true
---

# hermes2022-to-archimate/.cursor/rules/specification-hermes2022-to-archimate.mdc: Sp√©cification g√©n√©rale du projet hermes2022-to-archimate

> Cr√©√© le : 2025-08-15  
> Derni√®re mise √† jour : 2025-08-15

## Description g√©n√©rale

- Le projet hermes2022-to-archimate est une brique logicielle qui participe √† l'objectif de constituer un r√©f√©rentiel unique qui comprend √† la fois la m√©thodologie de projet et les √©l√©ments d'architecture du projet qui en d√©coule ainsi que sur un m√™me mod√®le les r√©alisations du projet, d'une part √† m√™me de produire des artefacts conformes √† partir d'une source unique de v√©rit√© (selon d'autres normes standards √©galement) et pouvant d'autre part √©galement alimenter des fonctionnalit√©s Retrieval Augmented Generation destin√©es √† alimenter des mod√®les de langage large (LLM) avec le projet cii-via-cip-archimate-ia-repository. Cette brique logicielle vise √† extraire les concepts de la m√©thodologie HERMES2022 √©dict√©e par la Conf√©d√©ration Helv√©tique pour d'une part les traduire en √©l√©ments et relations selon la m√©thode Archimate qui permette la mod√©lisation des principes adopt√©s dans le cadre du projet sur la base d'√©l√©ments conformes et valables selon la m√©thode et d'autre part alimenter l'intelligence artificielle selon les principes RAG.
- La finalit√© des projets men√©s dans le cadre du projet personnel est de faire la d√©monstration de la pertinence de combiner Archimate avec l'intelligence artificielle pour en faire un r√©f√©rentiel source unique de v√©rit√© b√¢ti selon une norme de repr√©sentation standard qui peut se d√©cliner sur l'entier du cycle de vie d'un produit logiciel de l'√©laboration de la vision m√©tier jusqu'√† la documentation technique de r√©f√©rence de bas niveau et qui soit interpr√©table par l'IA de mani√®re s√ªre et fiable pour produire des artefacts sous diverses autres formes √† but et destination d'audiences sp√©cifiques (audit par exemple, conformit√© √† des standards, ...).

## Contexte

- HERMES2022 est la m√©thodologie standard de gestion de programme et de projet de la conf√©d√©ration helv√©tique (<https://www.hermes.admin.ch/en/>)
- Archimate est une norme de repr√©sentation d'architecture d'entreprise √©dict√©e par l'Open Group, la version actuelle est la version 3.2 (<https://pubs.opengroup.org/architecture/archimate3-doc/>)
- Archi est un outil de gestion et de mod√©lisation d'un r√©f√©rentiel selon la norme Archimate (<www.archimatetool.com>)
- Cursor est un outil de d√©veloppement centr√© sur l'usage de l'IA, il est √©galement utilis√© comme outil conversationnel pour interroger l'IA dans le contexte du projet
- Neo4j est une base de donn√©es graphe avec des fonctionnalit√©s additionnelles RAG et Vector utilis√©es pour alimenter l'IA avec dev composants client-serveur MCP selon les principes RAG int√©gr√©s √† Cursor
- Customer Information Interface via Customer Information Port est un projet personnel d'√©tude d'opportunit√© men√© selon HERMES2022 et Archimate et donnant lieu √† l'√©laboration d'une preuve de concept complexe n√©cessitant plusieurs projets de d√©veloppements sp√©cifiques (React, Spring, Flowable, UIPath, Kexcloack, OsixiaLDAP, OAuth2, ...) dans un contexte s√©curis√© d'entreprise qui v√©rifie la faisabilit√© technique et fournit des indicateurs cl√©s pour mesurer l'effort n√©cessaire d'une r√©alisation √† l'√©chelle.

## Objectifs

- Faire traduire - et permettre la mise √† jour - de mani√®re efficiente et s√ªre les concepts de la m√©thode HERMES2022 en √©l√©ments et relations selon Archimate dans un r√©f√©rentiel g√©r√© avec Archi
- Permettre l'injection s√ªre et fiable des concepts HERMES2022 dans les fen√™tres de contexte de l'IA via les services RAG expos√© par Neo4j
- Analyser une alternative √† l'architecture ETL d'import/export √† partir du format d'interchange standard d√©fini par l'Open Group utilis√©e dans le cadre du projet cii-via-cip-archimate-ia-repository en utilisant l'interface du plugin JArchi de Archi pour manipuler le r√©f√©rentiel d'architecture d'entreprise de mani√®re interactive

## Conception g√©n√©rale

- Le projet est divis√© en trois module distincts : 1) Extraction/Transformation des concepts HERMES2022 √† partir du site internet 2) Chargement/Mise √† jour des √©l√©ments et relations correspondant aux concepts HERMES2022 d'un mod√®le Archimate de Archi 3) Chargement/Mise √† jour des noeuds d'une base de donn√©es graphe Neo4j correspondant aux concepts HERMES2022
- L'Extraction/Transformation donne lieu √† la cr√©ation/mise √† jour de fichiers interm√©diaires structur√©s et v√©rifiables pour √™tre partag√©s comme donn√©es de r√©f√©rence en entr√©e par les autres modules 1) pour le chargement initial et la mise √† jour de mod√®les Archimate Archi 2) et pour le chargement de la base de donn√©es graphe Neo4j
- Les fichiers interm√©diaires sont structur√©s selon un standard reconnu, lisibles et v√©rifiables tant par l'humain que par la machine

## Structure de r√©pertoire

| √âl√©ment | Type | Description |
|:--------|:-----|:------------|
| `/hermes2022-concepts-site-extraction/` | R√©pertoire | Module d'extraction des concepts HERMES2022 √† partir du site internet |
| `/archimate-model-loader/` | R√©pertoire | Chargement initial ou mis √† jour dans un mod√®le Archimate des √©l√©ments et relations correspondant aux concepts HERMES2022 |
| `/hermes2022-ia-loader` | R√©pertoire | Chargement des concepts HERMES2022 dans Neo4j |
| `/shared/` | R√©pertoire | Structure, types, validations et donn√©es partag√©es entre les modules |
| `/__tests__/` | R√©pertoire | Tests de conformit√© √† la pr√©sente sp√©cification |
| `README.md` | Documentation | [Lien sur la documentation selon les r√®gles de gouvernance g√©n√©rale] |

## D√©cisions architecturales et techniques

### Approche hybride IA & scripting

#### Description d√©taill√©e de la d√©cision

2025-08-16 Plusieurs approches ont √©t√© envisag√©es pour extraire les concepts HERMES2022 du site internet de la Conf√©d√©ration Helv√©tique (<https://www.hermes.admin.ch/en/>).
L'analyse des contenus du site en question a permis d'identifier des pages sp√©cifiques parfaitement organis√©es qui contiennent les informations n√©cessaires. Elles peuvent √™tre interpr√©t√©es efficacement et s√ªrement par l'IA avec des prompts appropri√©s pour produire des listes interm√©diaires structur√©es sur lesquelles se reposer pour alimenter et mettre √† jour un r√©f√©rentiel Archimate. Lesdites listes interm√©diaires peuvent par ailleurs √™tre administr√©es manuellement le cas √©ch√©ant pour proc√©der √† des ajustements et/ou √† des corrections.

Le projet est ainsi divis√© en deux parties qui se d√©roulent s√©quentiellement et trois modules :

**Phase 1 - Extraction :**

- `hermes2022-concepts-site-extraction` : Extraction automatis√©e des concepts HERMES2022 depuis le site web avec assistance IA, production de fichiers JSON interm√©diaires valid√©s

**Phase 2 - Chargement parall√®le :**

- `archimate-model-loader` : Chargement des concepts dans un mod√®le ArchiMate via l'interface JArchi d'Archi
- `hermes2022-ia-loader` : Chargement des concepts dans Neo4j pour services RAG et int√©gration IA

**Architecture modulaire :**

- Modules ind√©pendants communiquant via fichiers JSON interm√©diaires
- Interface standardis√©e JSON Schema pour validation des donn√©es
- Ex√©cution s√©quentielle Phase 1 puis Phase 2, modules Phase 2 ex√©cutables en parall√®le

#### Justification de la d√©cision

- Utilisation et mise en valeur du potentiel de l'IA dans un contexte parfaitement appropri√©
- Solution s√ªre avec revue et validation possible des listes interm√©diaires produites
- Gain de temps et d'effort substantiel

#### Patterns valid√©s √† suivre suite √† la d√©cision

- **S√©paration extraction/chargement** : Modules ind√©pendants avec interfaces d√©finies
- **Validation humaine** : Processus de revue des listes interm√©diaires
- **IA assist√©e** : Prompts structur√©s pour extraction coh√©rente

#### Anti-Patterns en raison d'erreurs identifi√©es, √† ne pas reproduire

- **Extraction directe** : √âviter l'extraction directe sans validation ‚Üí **Solution** : Listes interm√©diaires validables ‚Üí **R√®gle √† adopter** : Processus de validation syst√©matique

#### √âtat d'impl√©mentation de la d√©cision

üöß [En cours de conception et r√©alisation]

### Structure et format du fichier interm√©diaire

#### Description d√©taill√©e pour Structure et format du fichier interm√©diaire

- Le fichier interm√©diaire est en format JSON
- La structure est d√©finie et les donn√©es sont typ√©es sont un sch√©ma json (jsonschema)
- Les d√©finitions du sch√©ma json sont g√©r√©es dans plusieurs fichiers repr√©sentant les diff√©rentes parties du fichier (#ref, #ref) pour faciliter la maintenance
- Un fichier de donn√©es unique est cr√©√© afin de faciliter l'interpr√©tation et le chargement de celui-ci dans la base de donn√©es graphe Neo4j pour alimenter l'IA par RAG

#### Justification pour Structure et format du fichier interm√©diaire

- Format JSON : Lisibilit√© humaine et machine
- JSON Schema : Validation structurelle automatis√©e
- Modularit√© : Maintenance facilit√©e par la s√©paration des sch√©mas
- Interop√©rabilit√© : Format universel pour les 3 modules

#### Patterns valid√©s pour Structure et format du fichier interm√©diaire

- **JSON Schema modulaire** : S√©paration par domaines fonctionnels
- **Validation syst√©matique** : Contr√¥les automatis√©s avant consommation
- **Documentation int√©gr√©e** : Sch√©mas auto-document√©s

#### Anti-Patterns pour Structure et format du fichier interm√©diaire √† √©viter

- **Sch√©ma monolithique** : √âviter un seul fichier schema complexe ‚Üí **Solution** : Modularit√© par r√©f√©rences ‚Üí **R√®gle √† adopter** : Un sch√©ma par domaine ou concept pour faciliter la maintenance

#### √âtat d'impl√©mentation pour Structure et format du fichier interm√©diaire

üöß [En cours de conception et r√©alisation]

### Cadre de tests BDD et validation JSON ‚Äî frameworks, versions, usages

#### Description d√©taill√©e pour Cadre de tests BDD et validation JSON

- Frameworks et versions actuellement utilis√©s au stade tests:
  - Jest: 30.0.5
  - jest-cucumber: 4.5.0
  - ts-jest: 29.4.1
  - babel-jest: 30.0.5
  - Ajv: 8.17.1
  - ajv-formats: 3.0.1
- Port√©e: ex√©cution des sc√©narios BDD (Gherkin) et validation des artefacts
  JSON interm√©diaires via JSON Schema.
- Contexte Node.js: √† documenter (version exacte de l‚Äôenvironnement d‚Äôex√©cution).

#### Crit√®res de choix des versions

- Compatibilit√© Node LTS (‚â•18; recommand√©: 20).
- Alignement inter-packages (m√™mes majors, int√©grations √©prouv√©es).
- Stabilit√©/maintenance et correctifs r√©cents.
- Simplicit√© d‚Äôex√©cution des steps TypeScript sans build.

#### Justification des version par composant

##### Jest 30.0.5**

- Version majeure actuelle, maintenance active, corrections/performances r√©centes.
- Aligne babel-jest sur la m√™me major 30.
- Compatible Node 18/20; pas de besoin d‚Äô√©cosyst√®me Cucumber s√©par√©.

##### jest-cucumber 4.5.0

- Couche BDD Gherkin fine au‚Äëdessus de Jest; d√©coupl√©e du moteur TS.
- Version r√©cente stable, compatible Jest 29/30.

##### ts-jest 29.4.1

- Permet d‚Äôex√©cuter directement des steps .ts sans transpilation pr√©alable.
- Choix pragmatique tant que la compatibilit√© avec Jest 30 est satisfaisante dans ce repo. Si contrainte, on bascule soit:
√† Jest 29.x (compat matrice officielle avec ts-jest 29.x), soit
√† une cha√Æne Babel‚Äëonly (supprimer ts-jest, compiler via babel-jest + preset TS).

##### babel-jest 30.0.5

- Major align√©e avec Jest 30; n√©cessaire pour transformer d‚Äô√©ventuels fichiers JS/ESM et alternative de repli pour TS si on quitte ts-jest.

##### Ajv 8.17.1 + ajv-formats 3.0.1

- Derniers mineurs du major 8; ajv-formats v3 est la branche pr√©vue pour Ajv v8.
- Validation JSON Schema robuste, stricte et performante.

#### Justification pour Cadre de tests BDD et validation JSON

- jest-cucumber: BDD lisible (Gherkin) avec une ex√©cution unifi√©e via Jest.
- ts-jest: ex√©cution directe des steps TypeScript sans build pr√©alable.
- Ajv (+ formats): validation stricte et tra√ßable des artefacts JSON selon
  les sch√©mas partag√©s (contrat d‚Äôinterface).

#### Patterns valid√©s √† suivre pour Cadre de tests BDD et validation JSON

- Configuration centralis√©e: `cursor-ws-hermes2022-to-archimate/cucumber-jest.config.js`.
- D√©couverte des steps: `**/__tests__/{integration,e2e}/**/*.steps.{js,ts}` ;
  environnement `node` ; setup: `__tests__/support/jest-cucumber-setup.js`.
- R√©solution des artefacts: r√©pertoire pilot√© par `artifactBaseDir` dans
  `hermes2022-concepts-site-extraction/config/extraction-config.json` avec
  override optionnel par `HERMES_CONCEPTS_ARTIFACT_DIR`.
- Sidecar d‚Äôapprobation: fichier `*.approval.json` adjacent √† l‚Äôartefact.
- Sch√©mas de r√©f√©rence: `shared/hermes2022-extraction-files/config/json-schemas/*.json`.
- Outils √©diteur: configuration VSCode Cucumber (Gherkin) dans
  `cursor-ws-hermes2022-to-archimate/cucumber-vscode-plugin-settings.json`.

#### Anti-Patterns en raison d'erreurs identifi√©es, √† ne pas reproduire pour Cadre de tests BDD et validation JSON

- Runner Cucumber s√©par√©: √©viter la duplication d‚Äôinfrastructure de test ;
  privil√©gier Jest unique.
- Recherche multi-emplacements implicite pour les artefacts: √©viter des
  fallbacks opaques ; privil√©gier la configuration explicite du r√©pertoire.
- Couplage dur aux chemins: √©viter les chemins cod√©s en dur dans les steps ;
  utiliser config + variables d‚Äôenvironnement.

#### √âtat d'impl√©mentation de Cadre de tests BDD et validation JSON

‚úÖ Fonctionnel pour le module `hermes2022-concepts-site-extraction` (tests BDD
et validations JSON). Mont√©es de version √† effectuer de mani√®re coordonn√©e
(Jest/ts-jest) si n√©cessaire.

### Gestionnaire de paquets ‚Äî npm (interdiction de mixer avec yarn)

#### Description d√©taill√©e

- Gestionnaire retenu pour ce projet: npm.
- Contexte: d‚Äôautres projets imposent yarn (ex. int√©grations Flowable/React), mais ce d√©p√¥t utilise npm depuis l‚Äôorigine (installation des d√©pendances, ex√©cution des tests).

#### Justification

- Coh√©rence et tra√ßabilit√©: √©viter les d√©rives de lockfiles et r√©solutions diff√©rentes.
- Simplicit√©: outillage homog√®ne (`npm install`, `npx jest`, scripts npm).
- Isolation des projets: chaque d√©p√¥t fixe explicitement son gestionnaire.

#### Patterns valid√©s

- Installation: `npm install` exclusivement.
- Ex√©cution: `npx jest ‚Ä¶` ou via scripts npm (`npm run test` si d√©fini).
- Pas de lockfile yarn: pas de `yarn.lock` dans ce repo.

#### Anti-Patterns √† √©viter

- M√©lange npm/yarn dans le m√™me d√©p√¥t.
- Utilisation de `yarn` ou `pnpm` pour ce projet.

#### √âtat d‚Äôimpl√©mentation

‚úÖ npm utilis√© pour l‚Äôinstallation et l‚Äôex√©cution (`npx jest ‚Ä¶`); aucun artefact yarn attendu.