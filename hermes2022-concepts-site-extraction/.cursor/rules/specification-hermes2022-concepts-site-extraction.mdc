---
description: Sp√©cification g√©n√©rale du module hermes2022-concepts-site-extraction
alwaysApply: true
---

# specification-hermes2022-concepts-site-extraction.mdc: Sp√©cification g√©n√©rale du module hermes2022-concepts-site-extraction

Chemin : hermes2022-to-archimate/hermes2022-concepts-site-extraction/.cursor/rules/

> Cr√©√© le : 2025-08-16
> Derni√®re mise √† jour : 2025-10-24

## Description g√©n√©rale

- La m√©thode HERMES des gestion de projet et de programme de la Conf√©d√©ration Helv√©tique est d√©crite en anglais sur le site <https://www.hermes.admin.ch/en/>
- **Finalit√© du module** : Extraire automatiquement les concepts HERMES2022 depuis les pages officielles sp√©cifiques et les transformer en fichiers interm√©diaires structur√©s JSON valid√©s
- **Port√©e du module** : Extraction cibl√©e des concepts de la m√©thode HERMES2022 avec leur contexte et articulation g√©n√©rale, selon la hi√©rarchie officielle (1=Initiation, 2=Execution avec 2.1=Concept, 2.2=Implementation, 2.3=Deployment, 3=Closure)
- **Interface de sortie** : Fichiers JSON conformes aux sch√©mas d√©finis dans le module hermes2022-extraction-files

## Contexte

- Sp√©cification amont @.cursor/rules/specification-hermes2022-to-archimate.mdc
- Les m√©thodes HERMES de gestion de portefeuille et de gestion des applications sont hors contexte, elles sont ignor√©es
- La m√©thode HERMES2022 de gestion de projet et de programme de la Conf√©d√©ration Helv√©tique est d√©crite en plusieurs langues : allemand, fran√ßais, italien et anglais
- La racine du site <https://www.hermes.admin.ch> est modifi√©e automatiquement √† la langue par d√©faut ou est celle d√©finie dans l'url lors de la requ√™te
- L'url du site en allemand est <https://www.hermes.admin.ch/de/>
- L'url du site en fran√ßais est <https://www.hermes.admin.ch/fr/>
- L'url du site en italien est <https://www.hermes.admin.ch/it/>
- L'url du site en anglais est <https://www.hermes.admin.ch/en/>

## Objectifs

- Faire extraire par l'IA les concepts HERMES2022 jug√©s pertinents pour le projet des pages identifi√©es comme pertinentes du site internet de r√©f√©rence dans la langue souhait√©e.
- Faire transformer par l'IA les donn√©es jug√©es pertinentes pour les enregistrer dans des fichiers interm√©diaires structur√©s, lisibles et v√©rifiables par un humain avant chargement ult√©rieur

## Conception g√©n√©rale

- Un fichier de configuration JSON de l'extraction contient les propri√©t√©s utiles √† celle-ci
- Le processus d'extraction est un agent sp√©cialis√© :<br>- Javascript compatible comme plugin JArchi de Archi<br>- g√©n√©rique et configurable, son ex√©cution conforme est bas√©e sur le contenu du fichier de configuration et sur les d√©finitions de structure du fichier interm√©diaire cible
- L'extraction des contenus du site internet est assur√©e par l'agent sp√©cialis√© √† partir des urls d√©finies pour chaque concept dans le fichier de configuration
- Les transformations sont effectu√©es par l'IA sp√©cialis√©e NuExtract en faisant appel aux APIs disponibles en mode SaaS dans un projet nomm√© HERMES2022 qui peut comprendre des exemples ajustables propres √† chaque contexte directement dans la plateforme SaaS en dehors du code de l'agent.
- Les concept HERMES2022 jug√©s pertinents sont, en plus de la vue g√©n√©rale de la m√©thode dans son ensemble : 1) Les phases, 2) Les sc√©narios, 3) Les modules, 4) Les t√¢ches, 5) Les r√©sultats, 6) Les r√¥les
- les structures cibles de la transformation sont les structures et types d√©finis pour les fichiers interm√©diaires JSON

## Structure de r√©pertoire

| √âl√©ment | Type | Description |
|:--------|:-----|:------------|
| `/src/` | R√©pertoire | Code source de l'agent JavaScript pour l'extraction via APIs NuExtract |
| `/src/nuextract-client.js` | Code | Client pour les requ√™tes HTTP vers APIs NuExtract et gestion des r√©ponses JSON |
| `/config/` | R√©pertoire | Configuration de l'extraction et param√®tres pour l'agent JS |
| `/config/extraction-config.json` | Configuration | Param√®tres de configuration pour l'extraction automatis√©e (cl√©s API, URLs, etc.) |

## D√©cisions architecturales et techniques

### Site internet de r√©f√©rence HERMES2022

#### Justification pour le site internet de r√©f√©rence HERMES2022 en anglais

- La documentation de r√©f√©rence du projet est en anglais, les mod√®les Archimate sont donc en anglais, le site de r√©f√©rence √† prendre en consid√©ration pour HERMES2022 celui en anglais (<https://www.hermes.admin.ch/en/>).

#### Description d√©taill√©e pour le site internet de r√©f√©rence HERMES2022

- [2025-08-16] La racine du site internet de r√©f√©rence pour l'extraction des concepts HERMES2022 est <https://www.hermes.admin.ch/en/>. Elle permet de d√©finir la version de la m√©thodologie.
- [2025-10-16] La vue g√©n√©rale de la m√©thodologie est d√©crite dans les pages : <br>- <https://www.hermes.admin.ch/en/project-management/method-overview.html><br>- <https://www.hermes.admin.ch/en/project-management/method-overview/hermes-project-management-method-components.html><br>- <https://www.hermes.admin.ch/en/project-management/method-overview/preface.html>
- [2025-08-16] Les phases sont d√©crites dans les pages : <br>- <https://www.hermes.admin.ch/en/project-management/phases.html><br>- <https://www.hermes.admin.ch/en/project-management/phases/initiation.html><br>- <https://www.hermes.admin.ch/en/project-management/phases/concept.html><br>- <https://www.hermes.admin.ch/en/project-management/phases/implementation.html><br>- <https://www.hermes.admin.ch/en/project-management/phases/deployment.html><br>- <https://www.hermes.admin.ch/en/project-management/phases/execution.html><br>- <https://www.hermes.admin.ch/en/project-management/phases/closure.html>

#### Patterns valid√©s √† suivre suite √† la d√©cision

- **URL RACINE** √† utiliser pour les requ√™tes internet est <https://www.hermes.admin.ch/en/>

#### √âtat d'impl√©mentation de la d√©cision

üöß [En cours de sp√©cification et r√©alisation]

### Approche hybride IA : Javascript et mod√®le LLM sp√©cialis√© NuExtract dans le cloud par API

#### Description d√©taill√©e pour l'approche hybride IA

- [2025-10-14] L'extraction des concepts HERMES2022 utilise une approche hybride en deux phases : Phase 1 avec l'extraction de pages internet de r√©f√©rences par Javascript qui aliment des appels √† l'IA sp√©cialis√©e NuExtract par les APIs disponibles dans le cloud pour synth√©tiser les contenus et assurer la transformation dans le format JSON.
- [2025-08-16] L'approche doit permettre la r√©utilisation des comportements dans d'autres contextes que le projet actuel, notamment avec du param√©trage (autres contenants et contenus, autres instructions pour l'IA).
- [2025-10-14] Le composant doit pouvoir s'ex√©cuter dans Archi avec le plugin JArchi

#### Justification pour l'approche hybride IA avec NuExtract

- NuExtract est un LLM sp√©cialis√© pour l'extraction de donn√©es √† partir de diff√©rentes sources pour transformation dans un format structur√©s tel que JSON
- Une plateforme SaaS est disponible et gratuite avec de faible volume de donn√©es

#### Patterns valid√©s pour l'approche hybride IA

Exemples de la documentation officielle :

```bash
 curl "https://nuextract.ai/api/projects" \
  -H "Authorization: Bearer $NUEXTRACT_API_KEY"
```

```bash
PROJECT_ID="4c64870d-da8c-4718-aea9-fb2f86f07b42"
curl "https://nuextract.ai/api/projects/$PROJECT_ID/extract" \
  -X "POST" \
  -H "Authorization: Bearer $NUEXTRACT_API_KEY" \
  -H "content-type: text/plain" \
  -d "This is a text"
```

```bash
  PROJECT_ID="4c64870d-da8c-4718-aea9-fb2f86f07b42"
curl "https://nuextract.ai/api/projects/$PROJECT_ID/extract" \
  -X "POST" \
  -H "Authorization: Bearer $NUEXTRACT_API_KEY" \
  -H "content-type: application/octet-stream" \
  --data-binary @file_name.ext
```

L'ensemble des APIs NuExtract sont d√©crites dans @hermes2022-concepts-site-extraction/.cursor/rules/nuextract-platform.yaml qui est la r√©f√©rence officielle √† utiliser

#### Anti-Patterns pour l'approche hybride IA √† √©viter

- N√©ant

#### √âtat d'impl√©mentation pour l'approche hybride IA

üöß [En cours de conception et r√©alisation]

### Utilisation d'un agent JavaScript pour l'extraction via APIs NuExtract

#### Description d√©taill√©e pour l'utilisation d'un agent JavaScript

- [2025-10-14] L'extraction des concepts HERMES2022 est r√©alis√©e par un agent JavaScript ex√©cut√© dans JArchi (plugin d'Archi), qui articule les requ√™tes HTTP vers les APIs de NuExtract dans le cloud pour analyser et r√©sumer le contenu des pages HTML, puis g√©n√©rer des fichiers JSON structur√©s avec les synth√®ses op√©r√©es.
- [2025-10-14] L'agent g√®re le cycle complet : r√©cup√©ration des pages via HTTP, appel √† NuExtract pour extraction/synth√®se, validation et √©criture des templates g√©n√©r√©s.
- [2025-10-14] L'agent est con√ßu pour √™tre modulaire, r√©utilisable et int√©gr√© √† l'√©cosyst√®me JArchi de Archi sans d√©pendances externes inutiles.

#### Justification pour l'utilisation d'un agent JavaScript

- **Simplicit√© et Int√©gration** : Langage de r√©f√©rence qui permet d'utiliser les APIs Java natives (java.net.http.HttpClient) pour les requ√™tes HTTP et les appels aux APIs de NuExtract, √©vitant les d√©pendances Node.js ou Axios, et permettant une ex√©cution directe dans JArchi de Archi.
- **Limitation plateforme SaaS** : L'utilisation d'un agent permet d'assurer une meilleure maitrise des templates NuExtract en contournant certaines limitations de l'assistant de transformation JSON->Template de la plateforme qui ne traite pas compl√®tement les √©num√©rations d√©crites dans les formats JSON par exemple

#### Patterns valid√©s pour l'utilisation d'un agent JavaScript

- **Requ√™tes HTTP natives** : Utilisation de java.net.http.HttpClient pour les extractions de pages internet et les appels vers NuExtract, avec gestion des timeouts et redirections.
- **Gestion asynchrone** : Promesses JavaScript pour les requ√™tes non-bloquantes.
- **Validation JSON** : Utilisation de Zod ou Ajv pour valider les r√©ponses NuExtract contre les sch√©mas JSON.

#### Anti-Patterns pour l'utilisation d'un agent JavaScript √† √©viter

- **D√©pendances externes lourdes** : √âviter Axios ou libs Node.js ‚Üí **Solution** : APIs Java natives ‚Üí **R√®gle √† adopter** : Minimalisme pour int√©gration JArchi.
- **Gestion d'erreurs insuffisante** : √âviter les timeouts infinis ‚Üí **Solution** : Timeouts explicites ‚Üí **R√®gle √† adopter** : Robustesse et non-blocage de l'UI.

#### √âtat d'impl√©mentation pour l'utilisation d'un agent JavaScript

üöß [En cours de conception et r√©alisation]

### Int√©gration des APIs NuExtract pour l'extraction structur√©e

#### Description d√©taill√©e pour l'int√©gration des APIs NuExtract

- [2025-10-14] L'agent JavaScript utilise les APIs de NuExtract (mod√®le open source 3.8B bas√© sur Phi-3-mini) pour extraire des donn√©es structur√©es depuis du texte ou HTML vers JSON, garantissant un JSON valide et respectueux des sch√©mas.
- [2025-10-16] Les APIs NuExtact sont d√©crites dans @/home/micwic/gitRepositories/hermes2022-to-archimate/hermes2022-concepts-site-extraction/.cursor/rules/nuextract-platform.yaml
- [2025-10-16] GET /api/projects permet de lister les projets disponibles pour le compte dans dans la plateforme SaaS nuextact.ai, cela permet de d√©terminer {PROJECT_ID} pour HERMES2022 si il existe d√©j√† dans la plateforme SaaS nuextact.ai pour le compte.
- [2025-10-16] La cl√© API valable est stock√©e dans @hermes2022-concepts-site-extraction/config/nuextract-api-key.key
- [2025-10-16] POST /api/projects permet de cr√©er un projet et de d√©terminer {PROJECT_ID} pour HERMES2022 si un tel projet n'existe pas encore dans la plateforme SaaS nuextact.ai. Le projet est cr√©√© avec son template associ√© qui doit exister au pr√©alable dans le format requis par NuExtract
- [2025-10-16] POST /api/infer-template permet de cr√©er un Template NuExtract √† partir d'une description textuelle. Dans le contexte du projet, il faut fusionner les instructions textuelles de @/home/micwic/gitRepositories/hermes2022-to-archimate/hermes2022-concepts-site-extraction/config/instructions-template-nuextract.md avec les formats JSON pertinents, avec y compris les √©ventuelles r√©f√©rences (Exemple : "phases": {"$ref": "./hermes2022-phases.json"}) dans un seul format JSON homog√®ne.
- [2025-10-16] PUT /api/projects/{projectId}/template permet de mettre √† jour le template pour un projet d√©j√† existant
- [2025-10-17] POST /api/projects/{projectId}/infer-text permet d'ex√©cuter une extraction sur la base d'un texte dans le cadre fix√© pour le projet √† savoir sur la base d'un template NuExtract et des exemples de transformation fournis pour les param√®tres d√©finis. Dans le contexte du projet, il faut fusionner les instructions textuelles conform√©ment √† la s√©quence d√©finie dans @hermes2022-concepts-site-extraction/config/extraction-hermes2022-main.md avec avec les contenus HTML extrait des pages de r√©f√©rences correspondantes
- [2025-10-14] Gestion des quotas : L'API supporte des requ√™tes gratuites avec limites (ex. : 1000 requ√™tes/mois), et payantes pour plus de volume ; l'agent inclut un suivi des usages.

#### Justification pour l'int√©gration des APIs NuExtract

- **Pr√©cision et Fiabilit√©** : Mod√®le sp√©cialis√© pour extraction HTML‚ÜíJSON, surpassant les mod√®les g√©n√©ralistes pour cette t√¢che, avec validation automatique du JSON.
- **S√©curit√© et Conformit√©** : Utilisation de la cl√© API personnelle (pas de stockage sensible externe), respect des licences MIT et lois suisses.
- **Int√©gration avec JArchi** : APIs REST simples, compatibles avec java.net.http.HttpClient, sans d√©pendances suppl√©mentaires.
- **√âvolutivit√©** : Support de sch√©mas personnalis√©s pour diff√©rents concepts HERMES2022, et possibilit√© d'extension √† d'autres mod√®les IA.

#### Patterns valid√©s pour l'int√©gration des APIs NuExtract

- **Authentification Bearer** : Utilisation de l'en-t√™te `Authorization: Bearer <cl√© JWT>` pour s√©curiser les requ√™tes avec la cl√© d√©finie dans @hermes2022-concepts-site-extraction/config/nuextract-api-key.key
- **Gestion des Quotas** : Impl√©mentation d'un compteur d'usage dans l'agent, avec logging pour √©viter les d√©passements.
- **Validation de R√©ponse** : Parsing de la r√©ponse JSON avec v√©rification des erreurs (ex. : code 429 pour quota d√©pass√©).

#### Anti-Patterns pour l'int√©gration des APIs NuExtract √† √©viter

- **Utilisation sans authentification** : √âviter les requ√™tes non authentifi√©es ‚Üí **Solution** : Toujours inclure la cl√© Bearer ‚Üí **R√®gle √† adopter** : S√©curit√© des acc√®s API.
- **D√©passement de quotas** : √âviter les requ√™tes excessives ‚Üí **Solution** : Suivi et limites ‚Üí **R√®gle √† adopter** : Gestion proactive des ressources.
- **Hardcodage de la cl√©** : √âviter de coder la cl√© en dur ‚Üí **Solution** : Variable d'environnement ou config ‚Üí **R√®gle √† adopter** : S√©curit√© et maintenabilit√©.

#### √âtat d'impl√©mentation pour l'int√©gration des APIs NuExtract

üöß Int√©gration dans l'agent JS en cours

### Gestion des modes de g√©n√©ration de template (sync/async)

#### Description d√©taill√©e pour la gestion des modes

- [2025-10-24] L'extraction supporte deux modes de g√©n√©ration de template via le param√®tre `templateMode` dans `extraction-config.json`
- [2025-10-24] **Mode sync** : Utilise `/api/infer-template` - traitement synchrone avec timeout HTTP global
- [2025-10-24] **Mode async** : Utilise `/api/infer-template-async` - traitement asynchrone avec polling de statut
- [2025-10-24] **Constat empirique** : L'API synchrone timeout √† ~11 secondes avec le sch√©ma `hermes2022-concepts.json` (4442 caract√®res) et retourne erreur 206 (Partial Content) avec body vide `{}`, tandis que l'API asynchrone permet de traiter le m√™me sch√©ma en 44 secondes avec succ√®s
- [2025-10-24] **Param√®tre unifi√© `templateGenerationDuration`** : Repr√©sente le temps estim√© de g√©n√©ration (d√©faut 30000ms)
  - **Mode sync** : Utilis√© comme base pour le timeout HTTP avec marge de s√©curit√© = `templateGenerationDuration + 5000`
  - **Mode async** : Utilis√© comme sleep initial avant le polling = `templateGenerationDuration`
- [2025-10-24] Le template g√©n√©r√© est sauvegard√© dans `shared/hermes2022-extraction-files/config/nuextract-template-generated/nuextract-template.json`

#### Justification pour la gestion des modes

- **Flexibilit√©** : Permet de choisir entre rapidit√© (sync pour petits sch√©mas) et fiabilit√© (async pour sch√©mas complexes >4000 caract√®res)
- **R√©sout les timeouts** : Le mode async r√©sout les timeouts syst√©matiques avec des sch√©mas JSON complexes
- **Gestion d'erreur explicite** : Message d'erreur clair en cas de timeout sync proposant de passer en mode async

#### Patterns valid√©s pour la gestion des modes

- **Param√®tre `templateMode`** : Valeurs accept√©es "sync" ou "async" (d√©faut "sync" si absent)
- **Param√®tre `templateGenerationDuration`** : Temps estim√© en ms (d√©faut 30000)
- **Param√®tres d'endpoints** : `infer-templatePath` et `infer-templateAsyncPath` dans configuration
- **Mode sync** :
  - Timeout HTTP = `templateGenerationDuration + 5000` ms
  - Pas de sleep, pas de retry
  - Template retourn√© directement dans la r√©ponse
  - Message d'erreur timeout explicite : "Timeout sync apr√®s Xms. Pour sch√©mas >4000 caract√®res, utilisez templateMode: 'async'"
- **Mode async** :
  - Timeout param√®tre API = 60 secondes (`?timeout=60s`)
  - Sleep initial = `templateGenerationDuration` ms
  - Polling interval = 3 secondes entre chaque v√©rification
  - Max attempts = 20 tentatives de polling
  - Workflow : POST `/api/infer-template-async?timeout=60s` ‚Üí obtenir jobId ‚Üí sleep ‚Üí polling GET `/api/jobs/{jobId}` ‚Üí r√©cup√©rer outputData
  - Statuts accept√©s : `"completed"` (succ√®s normal) ET `"timeout"` (succ√®s avec d√©passement timeout mais outputData pr√©sent)
  - Statut √©chec : `"failed"` (√©chec du job)
- **Format description** : Sch√©ma JSON en premier, puis instructions (sans headers/commentaires) ‚Äî Les instructions plac√©es avant le sch√©ma perturbent la g√©n√©ration du template
- **Limite taille** : 32k caract√®res pour le champ `description` selon support NuMind

#### Anti-Patterns pour la gestion des modes √† √©viter

- **Mode invalide** : √âviter templateMode ni "sync" ni "async" ‚Üí **Solution** : Validation stricte ‚Üí **R√®gle √† adopter** : Lever erreur explicite si valeur invalide
- **Utiliser mode sync pour sch√©mas >4000 caract√®res** : √âviter `/api/infer-template` pour gros sch√©mas ‚Üí **Solution** : Utiliser mode async ‚Üí **R√®gle √† adopter** : Workflow async pour sch√©mas complexes
- **Polling imm√©diat (async)** : √âviter de poller d√®s la soumission ‚Üí **Solution** : Sleep `templateGenerationDuration` initial ‚Üí **R√®gle √† adopter** : Laisser le temps au job de s'initialiser
- **Polling trop rapide (async)** : √âviter interval <2s ‚Üí **Solution** : Interval 3s ‚Üí **R√®gle √† adopter** : Limiter la charge sur l'API
- **Instructions avant sch√©ma** : √âviter headers/instructions avant le sch√©ma JSON ‚Üí **Solution** : Sch√©ma d'abord, instructions apr√®s ‚Üí **R√®gle √† adopter** : Format description = sch√©ma + instructions (sans headers)

#### √âtat d'impl√©mentation pour la gestion des modes

‚úÖ [Fonctionnalit√© r√©alis√©e]

### Parsing des instructions compl√©mentaires depuis fichier Markdown

#### Description d√©taill√©e pour le parsing des instructions compl√©mentaires

- [2025-10-21] Les instructions compl√©mentaires pour l'API NuExtract sont stock√©es dans un fichier Markdown structur√© avec documentation humaine et instructions op√©rationnelles s√©par√©es
- [2025-10-21] Le parsing extrait uniquement le contenu sous le heading `## Instructions compl√©mentaires pour /api/infer-template /api/infer-template-async de NuExtract`
- [2025-10-21] La documentation (Objectif, Mode d'utilisation) est pr√©serv√©e pour la lisibilit√© humaine mais exclue de l'envoi √† l'API
- [2025-10-21] Le parsing s'arr√™te au prochain heading de niveau 1 ou 2 (ou fin de fichier) pour isoler uniquement les instructions pertinentes

#### Justification pour le parsing des instructions compl√©mentaires

- **Lisibilit√© pr√©serv√©e** : Le fichier reste document√© et compr√©hensible pour les humains
- **API optimis√©e** : Seules les instructions pertinentes sont envoy√©es, √©vitant la pollution du contexte
- **Maintenabilit√©** : S√©paration claire entre documentation et instructions op√©rationnelles dans un fichier unique
- **Robustesse** : Fallback sur le fichier complet si le heading n'est pas trouv√©

#### Patterns valid√©s pour le parsing des instructions compl√©mentaires

- **Heading standard** : `## Instructions compl√©mentaires pour /api/infer-template /api/infer-template-async de NuExtract` comme marqueur de section
- **Parsing par lignes** : Extraction ligne par ligne depuis le heading jusqu'au prochain heading de niveau 1-2
- **Regex arr√™t** : Pattern `/^#{1,2}\s+/` pour d√©tecter les headings de niveau 1 ou 2
- **Fallback document√©** : Warning si heading non trouv√©, utilisation fichier complet
- **Trim final** : Nettoyage des espaces/lignes vides avant/apr√®s

#### Anti-Patterns pour le parsing des instructions compl√©mentaires √† √©viter

- **Fichiers s√©par√©s** : √âviter duplication doc/instructions ‚Üí **Solution** : Fichier unique avec parsing ‚Üí **R√®gle √† adopter** : Documentation et instructions colocalis√©es
- **Envoi complet** : √âviter d'envoyer toute la documentation √† l'API ‚Üí **Solution** : Extraction cibl√©e ‚Üí **R√®gle √† adopter** : Parser le Markdown pour isoler les instructions
- **Heading variable** : √âviter des noms de heading changeants ‚Üí **Solution** : Heading standard document√© ‚Üí **R√®gle √† adopter** : Convention de nommage stricte

#### √âtat d'impl√©mentation pour le parsing des instructions compl√©mentaires

‚úÖ [Fonctionnalit√© r√©alis√©e]

### Structure et format des instructions d'extraction

#### Description d√©taill√©e pour la structure et format des instructions d'extraction

- [2025-08-16] Les instructions d'extraction utilisent le format Markdown pour optimiser l'utilisation par l'IA
- [2025-08-16] Un fichier d'instructions s√©par√© est cr√©√© pour chaque concept HERMES2022 √† extraire (phases, sc√©narios, modules, t√¢ches, r√©sultats, r√¥les)
- [2025-08-16] Les instructions se concentrent uniquement sur la transformation, pas sur la d√©finition de la structure cible
- [2025-08-16] La structure cible est d√©finie par les sch√©mas JSON des fichiers interm√©diaires, cr√©ant un contrat d'interface entre extraction et consommation
- [2015-10-18] Les pages html de r√©f√©rence pour un concept sont d√©clar√©es dans une propri√©t√© sourceURL de type caract√®re associ√©e √† une √©num√©ration pour la liste qui est √† concat√©n√©e pour la former la cha√Æne de caract√®re √† l'ex√©cution pour journaliser les pages effectivement utilis√©es lors de la cr√©ation du fichier interm√©diaire. Le sch√©ma JSON sert √† la fois de d√©finition de la propri√©t√© de journalisation et de param√®tre avec l'√©num√©ration.

#### Justification pour la structure et format des instructions d'extraction

- **Format Markdown** : Naturel pour l'IA, instructions conversationnelles claires
- **Fichiers s√©par√©s** : Maintenance facilit√©e, lisibilit√© optimale, √©volution ind√©pendante par concept
- **S√©paration des responsabilit√©s** : Instructions d'extraction ‚â† d√©finition structure cible
- **Contrat d'interface** : Synchronisation progressive entre instructions et sch√©mas cibles

#### Patterns valid√©s pour la structure et format des instructions d'extraction

- **Un fichier par concept** : `/config/extraction-{concept}.md` pour chaque concept HERMES2022
- **Instructions conversationnelles** : Prompts naturels adapt√©s √† l'IA
- **Synchronisation progressive** : √âvolution conjointe des instructions et des sch√©mas cibles
- **Validation par sch√©ma** : Contr√¥le de conformit√© via JSON Schema des fichiers interm√©diaires

#### Anti-Patterns pour la structure et format des instructions d'extraction √† √©viter

- **Fichier monolithique** : √âviter un seul fichier pour tous les concepts ‚Üí **Solution** : Fichiers s√©par√©s par concept ‚Üí **R√®gle √† adopter** : Modularit√© conceptuelle
- **M√©lange des responsabilit√©s** : √âviter de d√©finir la structure cible dans les instructions ‚Üí **Solution** : S√©paration claire extraction/structure ‚Üí **R√®gle √† adopter** : Contrat d'interface via sch√©mas
- **Format technique** : √âviter JSON/YAML pour les instructions ‚Üí **Solution** : Markdown conversationnel ‚Üí **R√®gle √† adopter** : Instructions naturelles pour l'IA

#### √âtat d'impl√©mentation pour la structure et format des instructions d'extraction

üöß [En cours de conception et r√©alisation]

### Contrat d'interface extraction-fichiers interm√©diaires

#### Description d√©taill√©e pour le contrat d'interface

- [2025-08-16] Un contrat d'interface est √©tabli entre les instructions d'extraction et les sch√©mas des fichiers interm√©diaires, il consiste surtout √† v√©rifier et faire se synchroniser les d√©finitions dans les sp√©cifications respectives par l'IA
- [2025-08-16] La synchronisation se fait progressivement au fur et √† mesure de l'√©volution des besoins
- [2025-08-16] Les sch√©mas JSON des fichiers interm√©diaires d√©finissent la structure cible de la transformation

#### Justification pour le contrat d'interface

- **Coh√©rence** : Garantit l'alignement entre extraction et consommation
- **√âvolutivit√©** : Permet l'adaptation progressive des deux c√¥t√©s
- **Validation** : Assure la conformit√© des donn√©es extraites
- **Maintenance** : Facilite la gestion des changements

#### Patterns valid√©s pour le contrat d'interface

- **Synchronisation progressive** : √âvolution conjointe des instructions et sch√©mas
- **Validation automatique** : Contr√¥le de conformit√© via JSON Schema
- **Documentation partag√©e** : R√©f√©rence commune pour l'√©quipe

#### √âtat d'impl√©mentation pour le contrat d'interface

üöß [En cours de sp√©cification et r√©alisation]

### Visa humain d'overview pour hermes2022-concepts

#### Description d√©taill√©e pour le visa humain d'overview

- [2025-08-19] La qualit√© du champ `overview` des concepts HERMES2022 est valid√©e manuellement via un fichier d'approbation (sidecar) adjacent √† l'artefact JSON produit.
- [2025-08-19] Le visa est consign√© par √©l√©ments/r√®gles √† contr√¥ler (statuts par item) avec des m√©tadonn√©es globales uniques (reviewer, date, notes).

#### Justification pour le visa humain d'overview

- La conformit√© structurelle est assur√©e par JSON Schema; la qualit√© s√©mantique de `overview` requiert un jugement humain.
- La mat√©rialisation explicite du visa am√©liore la tra√ßabilit√© et l'auditabilit√© sans sur‚Äëing√©nierie.

#### Patterns valid√©s pour le visa humain d'overview

- **Sidecar d'approbation**: Fichier sidecar adjacent nomm√© comme l'artefact avec suffixe `.approval.json` g√©n√©r√© par l'IA en post extraction
- **Sch√©ma d'approbation**: `shared/hermes2022-extraction-files/config/json-schemas/hermes2022-concepts-approval.json`.
- **Structure du visa**:
  - M√©tadonn√©es globales: `artifact`, `reviewer`, `date`, `notes?`.
  - D√©tails par item: `target`, `rule`, `status` (`approved|rejected|pending`), `lastChecked`, `comment?`, `evidence?`.
- **Initialisation status approbation** : Cible √† valider g√©n√©r√©es selon liste ci-dessous avec status "pending" pour les cibles √† valider en post extraction

**Cibles √† valider par revue humaine (format JSON Pointer)** :

- `/concepts/overview`

#### Anti-Patterns pour le visa humain d'overview √† √©viter

- **Visa global unique**: √©viter un statut global sans granularit√© par r√®gle/cible.
- **Absence de sch√©ma**: √©viter des fichiers d'approbation non valid√©s.

#### √âtat d'impl√©mentation pour le visa humain d'overview

‚úÖ Sch√©ma d'approbation cr√©√©: `shared/hermes2022-extraction-files/config/json-schemas/hermes2022-concepts-approval.json`
üöß Int√©gration dans le flux d'extraction/validation BDD √† compl√©ter

### Param√©trage du r√©pertoire des artefacts (artifactBaseDir)

#### Description d√©taill√©e

- [2025-08-20] Ajout d‚Äôune propri√©t√© `artifactBaseDir` dans `config/extraction-config.json` pour orienter l‚Äôoutillage (tests BDD inclus) vers un r√©pertoire unique d‚Äôartefacts sans recherche multiple.
- Valeur: chemin relatif au r√©pertoire `hermes2022-concepts-site-extraction/` (chemin absolu accept√©).
- Objectif: permette l'ex√©cution avec des fixtures pour attester les fonctionnement des tests sans cr√©er de sur consommation de ressources (alternative syst√©matique avec fallback)

#### Justification

- S√ªret√©: les tests restent strictement conformes aux sch√©mas; tra√ßabilit√© inchang√©e.
- Durabilit√©: supprime les recherches/fallbacks redondants (√©conomie CPU/IO).
- Gouvernance: distingue explicitement les jeux d‚Äôattestation (`__tests__/fixtures/...`) des donn√©es ‚Äúr√©elles‚Äù (`shared/.../data/`) par configuration, pas par heuristique.

#### Patterns valid√©s

- R√©pertoire unique pilot√© par `artifactBaseDir`.
- Sidecar d‚Äôapprobation adjacent et r√©solu depuis le m√™me r√©pertoire.
- Override optionnel via variable d‚Äôenvironnement `HERMES_CONCEPTS_ARTIFACT_DIR` (si pr√©sent, prioritaire sur `artifactBaseDir`).

#### Anti-Patterns (√† √©viter)

- Recherche multi-emplacements implicite (fixtures ‚Üí shared) dans le code des steps.
- D√©nominations sp√©ciales dans les noms de fichiers (la distinction se fait par le r√©pertoire).
- Couplage fort aux chemins en dur dans les steps.

#### √âtat d'impl√©mentation

üöß √Ä impl√©menter dans les steps BDD et la configuration

### Format du template NuExtract g√©n√©r√© par l'API

#### Description d√©taill√©e pour le format du template NuExtract

- [2025-10-21] L'API `/api/infer-template-async` transforme un sch√©ma JSON Schema en template NuExtract avec des r√®gles de conversion sp√©cifiques
- [2025-10-21] **Fixture de r√©f√©rence** : Template valide obtenu de la plateforme SaaS disponible dans `__tests__/fixtures/nuextract-template-valid.json`
- [2025-10-21] **Types de base** : `"type": "string"` ‚Üí `"string"`, `"type": "string", "pattern": "..."` ‚Üí `"verbatim-string"`, `"type": "string", "format": "date"` ‚Üí `"date-time"`
- [2025-10-21] **√ânum√©rations** : Les `enum` JSON Schema sont converties en **tableaux** dans le template NuExtract (ex: `"enum": ["de", "fr", "it", "en"]` ‚Üí `["de", "fr", "it", "en"]`)
- [2025-10-21] **Tableaux** : Les `"type": "array"` JSON Schema sont repr√©sent√©s avec **un seul √©l√©ment type** dans le template
- [2025-10-21] **R√©f√©rences $ref** : Les r√©f√©rences sont **r√©solues et int√©gr√©es** dans le template final (pas de `$ref` dans le template NuExtract)

#### Justification pour le format du template NuExtract

- **Interop√©rabilit√©** : Format standardis√© NuExtract pour les extractions futures
- **Validation** : Template valid√© par la plateforme SaaS garantit la conformit√©
- **Tests** : Fixture de r√©f√©rence permet la validation automatis√©e des g√©n√©rations de template
- **Documentation par l'exemple** : Template valide sert de r√©f√©rence pour comprendre les transformations

#### Patterns valid√©s pour le format du template NuExtract

- **Conversion √©num√©rations** : `"language": {"type": "string", "enum": ["de", "fr", "it", "en"]}` ‚Üí `"language": ["de", "fr", "it", "en"]`
- **Types NuExtract** : `"verbatim-string"` pour patterns, `"string"` pour texte libre, `"date-time"` pour dates
- **R√©solution r√©f√©rences** : `"concept-phases": {"$ref": "./hermes2022-phases.json"}` ‚Üí structure compl√®te int√©gr√©e
- **Arrays template** : `"phases": [{"id": "verbatim-string", "name": "string", ...}]` (un seul √©l√©ment type)
- **Fixture de test** : `__tests__/fixtures/nuextract-template-valid.json` comme r√©f√©rence pour validation

#### Anti-Patterns pour le format du template NuExtract √† √©viter

- **$ref non r√©solues** : √âviter de laisser des `$ref` dans le template ‚Üí **Solution** : R√©soudre toutes les r√©f√©rences avant envoi √† l'API ‚Üí **R√®gle √† adopter** : Utiliser le sch√©ma r√©solu complet
- **√ânum√©rations non converties** : √âviter de tester avec `"enum": [...]` dans template ‚Üí **Solution** : Valider que les √©num√©rations sont des tableaux ‚Üí **R√®gle √† adopter** : Tests BDD v√©rifient la conversion
- **Structure array incorrecte** : √âviter plusieurs √©l√©ments types dans array ‚Üí **Solution** : Un seul √©l√©ment type ‚Üí **R√®gle √† adopter** : Format NuExtract standard

#### √âtat d'impl√©mentation pour le format du template NuExtract

‚úÖ [Fixture valid√©e et tests adapt√©s]

- ‚úÖ **Fixture de r√©f√©rence** : `__tests__/fixtures/nuextract-template-valid.json` cr√©√©e depuis plateforme SaaS
- ‚úÖ **Tests BDD am√©lior√©s** : Validation de la structure, des √©num√©rations converties, des types NuExtract, et de la r√©solution des `$ref`
- üöß **API retourne template vide** : Investigation en cours avec NuMind sur pourquoi l'API retourne `{}` alors que la plateforme SaaS fonctionne correctement
