openapi: 3.1.0
info:
  title: NuExtract Platform
  version: ""
  description: "

    NB: you can also interact with this API via the [Python
    SDK](https://github.com/numindai/nuextract-platform-sdk).


    ## Extracting Information from Documents


    Once your project is ready, you can use it to extract information from
    documents in real time via this RESTful API.


    Each project has its own extraction endpoint:


    `https://nuextract.ai/api/projects/{projectId}/extract`


    You provide it a document and it returns the extracted information according
    to the task defined in the project. To use it, you need:


    - To create an API key in the [Account
    section](https://nuextract.ai/app/user?content=api)

    - To replace `{projectId}` by the project ID found in the API tab of the
    project


    You can test your extraction endpoint in your terminal using this
    command-line example with curl (make sure that you replace values of
    `PROJECT_ID` and `NUEXTRACT_API_KEY`):


    ```bash

    NUEXTRACT_API_KEY=\"_your_api_key_here_\"; \\

    PROJECT_ID=\"a24fd84a-44ab-4fd4-95a9-bebd46e4768b\"; \\

    curl \"https://nuextract.ai/api/projects/${PROJECT_ID}/extract\" \\

    \  -X POST \\

    \  -H \"Authorization: Bearer ${NUEXTRACT_API_KEY}\" \\

    \  -H \"Content-Type: application/octet-stream\" \\

    \  --data-binary @\"${FILE_NAME}\"

    ```


    You can also use the [Python
    SDK](https://github.com/numindai/nuextract-platform-sdk#documentation), by
    replacing the

    `project_id`, `api_key` and `file_path` variables in the following code:


    ```python

    from numind import NuMind

    from pathlib import Path


    client = NuMind(api_key=api_key)

    file_path = Path(\"path\", \"to\", \"document.odt\")

    with file_path.open(\"rb\") as file:

    \    input_file = file.read()

    output_schema = client.post_api_projects_projectid_extract(project_id,
    input_file)

    ```


    ## Using the Platform via API


    Everything you can do on the web platform can be done via API -

    \ check the [user
    guide](https://www.notion.so/User-Guide-17c16b1df8c580d3a579ebfb24ddbea7?pv\
    s=21) to learn about how the platform works.

    \ This can be useful to create projects automatically, or to make your
    production more robust for example.


    ### Main resources


    - **Project** - user project, identified by `projectId`

    - **File** - uploaded file,  identified by `fileId`, stored up to two weeks
    if not tied to an **Example**

    - **Document** - internal representation of a document, identified by
    `documentId`, created from a File or a text, stored up to two weeks if not
    tied to an Example

    - **Example** - document-extraction pair given to teach NuExtract,
    identified by `exampleId`, created from a Document


    ### Most common API operations


    - Creating a **Project** via `POST /api/projects`

    - Changing the template of a **Project** via `PATCH
    /api/projects/{projectId}`

    - Uploading a file to a **File** via `POST /api/files` (up to 2 weeks
    storage)

    - Creating a **Document** via `POST /api/documents/text` and `POST
    /api/files/{fileID}/convert-to-document` from a text or a **File**

    - Adding an **Example** to a **Project** via `POST
    /api/projects/{projectId}/examples`

    - Changing Project settings via `POST /api/projects/{projectId}/settings`

    - Locking a **Project** via `POST /api/projects/{projectId}/lock`


    ## Testing with a temporary authorization


    This documentation allows to directly test the API. You first need to select
    `oauth2uth` in the \"Authentication\" box, set the `Client ID` value to
    `user`, and click on \"Authorize\". You can then go to an API endpoint,
    e.g.  `POST /api/{projectID}/extract`, press “Test Request”, fill out the
    body (you can upload a document in this case), and press “Send” to get the
    output.

    \    "
tags:
  - name: Extraction
    description: Extract information from text and files.
  - name: Project Management
    description: A **Project** defines a specific extraction task. It is composed of
      an output JSON template, extraction examples (**Examples**), and inference
      settings.
  - name: Files
    description: A **File** is an uploaded file, identified by a `fileId`, stored up
      to two weeks if not tied to an **Example**. It can be converted to a
      **Document** in order to be used as an **Example** in a project.
  - name: Documents
    description: A **Document** is a text or **File**, identified as by a
      `documentId`, which can be used as input **Example** for a project.
  - name: Examples
    description: An **Example** is a pair of input **Document** and expected output
      that are provided to the NuExtract model to teach it how to extract the
      information, as In Context Learning (ICL).
  - name: Jobs
    description: A **Job** represents an asynchronous task that can be tracked for
      completion. Jobs are short-lived (< 5 minutes) and provide status updates.
paths:
  /api/projects/{projectId}/extract:
    post:
      tags:
        - Extraction
      description: "

        \ Extract information from the provided text or file. Some files are
        converted to images -\ 

        the **rasterizationDPI** parameter controls their resolution. When
        **temperature**, **rasterizationDPI**,\ 

        **maxOutputTokens**, **degradedMode** and **maxTokensSmartExample**
        parameters are not specified,\ 

        they are set to their project-setting values.


        #### Response:

        Returns a JSON representing the extracted information.

        \ The ***result*** field is guaranteed to conform to the template via
        post-processing

        \ of the raw model output. In the event that the raw model output did
        not conform to the template,

        \ it is included in the ***rawResponse*** field, together with the
        corresponding error message,

        \ and an HTTP code 206 is returned.


        #### Error Responses:

        `404 Not Found` - If a **Project** with the specified `projectId` does
        not exist.


        `403 Forbidden` - If the user does not have permission to run inference
        on this **Project**.

        \   "
      operationId: postApiProjectsProjectidExtract
      parameters:
        - name: projectId
          in: path
          description: Unique project identifier.
          required: true
          schema:
            type: string
        - name: temperature
          in: query
          description: |-
            Model temperature (optional). Controls output diversity. 
            When not specified, the project value is used.  
            Ranges between 0 and 1.
          required: false
          schema:
            type: number
            format: double
            minimum: 0
            maximum: 1
        - name: rasterizationDPI
          in: query
          description: >-
            Resolution used to convert formatted documents (PDFs, etc.) to
            images, in dot per inch (optional).  

            Ranges between 1 and 300.
          required: false
          schema:
            type: integer
            format: int32
            exclusiveMinimum: 0
            maximum: 300
        - name: maxOutputTokens
          in: query
          description: Maximum number of output tokens (optional). Must be positive. Set
            to 0 for no limit.
          required: false
          schema:
            type: integer
            format: int64
        - name: degradedMode
          in: query
          description: Controls whether a response is returned when smart example is not
            functionning. Rejects by default.
          required: false
          schema:
            type: string
        - name: maxTokensSmartExample
          in: query
          description: >-
            Controls the maximum number of tokens that can be allocated to the
            examples. 

            Must be positive. Ranges in the context window of the model.
          required: false
          schema:
            type: integer
            format: int32
            minimum: 0
            maximum: 32000
      requestBody:
        content:
          application/octet-stream:
            schema:
              type: string
              format: binary
        required: true
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExtractionResponse"
              example:
                result:
                  orderId: "Example: o-45762"
                  customerId: "Example: c-39874"
                  orderDate: 2024-01-22T16:45:00.000Z
                  status: delivered
                  totalAmount: 299.5
                  currency: USD
                  items:
                    - productId: p-00234
                      quantity: 3
                      unitPrice: 49.99
                    - productId: p-00789
                      quantity: 1
                      unitPrice: 149.53
                  shippingAddress:
                    street: 982 Birch Ln
                    city: San Diego
                    state: CA
                    country: USA
                    zip: "92103"
                  comments: Deliver to reception desk.
                  deliveryPreferences:
                    - signature_required
                    - express_shipping
                  estimatedDelivery: 2024-01-25T15:30:00.000Z
                completionTokens: 400
                promptTokens: 235
                totalTokens: 635
                logprobs: -0.34
        "400":
          description: "Invalid value for: query parameter temperature, Invalid value for:
            query parameter rasterizationDPI, Invalid value for: query parameter
            maxOutputTokens, Invalid value for: query parameter
            maxTokensSmartExample, Invalid value for: body"
          content:
            text/plain:
              schema:
                type: string
        default:
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      security:
        - oauth2Auth:
            - openid
            - profile
            - email
  /api/projects/{projectId}/extract-async:
    post:
      tags:
        - Extraction
      description: Start file extraction as async job
      operationId: postApiProjectsProjectidExtract-async
      parameters:
        - name: projectId
          in: path
          description: Unique project identifier.
          required: true
          schema:
            type: string
        - name: temperature
          in: query
          description: |-
            Model temperature (optional). Controls output diversity. 
            When not specified, the project value is used.  
            Ranges between 0 and 1.
          required: false
          schema:
            type: number
            format: double
            minimum: 0
            maximum: 1
        - name: dpi
          in: query
          description: >-
            DPI for file rasterization (optional). 

            When not specified, the project value is used.  

            If the file is already an image or a text, this parameter is
            ignored.
          required: false
          schema:
            type: integer
            format: int32
            exclusiveMinimum: 0
            maximum: 300
        - name: maxOutputTokens
          in: query
          description: |-
            Maximum number of output tokens (optional). 
            When not specified, the project value is used.  
            Use 0 to indicate no limit.
          required: false
          schema:
            type: integer
            format: int64
        - name: degradedMode
          in: query
          description: Controls whether a response is returned when smart example is not
            functionning. Rejects by default.
          required: false
          schema:
            type: string
        - name: maxTokensSmartExample
          in: query
          description: >-
            Controls the maximum number of tokens that can be allocated to the
            examples. 

            Must be positive. Ranges in the context window of the model.
          required: false
          schema:
            type: integer
            format: int32
            minimum: 0
            maximum: 32000
        - name: timeout
          in: query
          description: max time to wait for the processing completion
          required: false
          schema:
            type: string
      requestBody:
        content:
          application/octet-stream:
            schema:
              type: string
              format: binary
        required: true
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/JobIdResponse"
              example:
                jobId: 550e8400-e29b-41d4-a716-446655440000
        "400":
          description: "Invalid value for: query parameter temperature, Invalid value for:
            query parameter dpi, Invalid value for: query parameter
            maxOutputTokens, Invalid value for: query parameter
            maxTokensSmartExample, Invalid value for: body"
          content:
            text/plain:
              schema:
                type: string
        default:
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      security:
        - oauth2Auth:
            - openid
            - profile
            - email
  /api/projects:
    get:
      tags:
        - Project Management
      description: "

        Return a list of **Projects** accessible to the authenticated user.


        #### Error Responses:

        `403 Forbidden` - If the user attempts to access an unauthorized
        organization.

        \  "
      operationId: getApiProjects
      parameters:
        - name: organizationId
          in: query
          description: >-
            Optional organization identifier.  

            When specified, projects of the given organization are returned
            instead of personal projects.  

            This parameter is ignored if ***reference=true***.
          required: false
          schema:
            type: string
        - name: reference
          in: query
          description: If **true**, only reference projects are returned.
          required: false
          schema:
            type: boolean
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ProjectResponse"
              example:
                - id: fbeb32ab-025b-4155-817a-f540d0476f32
                  name: "Example: Order Delivery Information Extraction"
                  description: "Example: Automated extraction of order delivery details from
                    emails and scanned documents"
                  template:
                    type: schema
                    schema:
                      orderId: verbatim-string
                      customerId: verbatim-string
                      orderDate: date-time
                      status:
                        - pending
                        - processed
                        - shipped
                        - delivered
                        - cancelled
                      totalAmount: number
                      currency: string
                      items:
                        - productId: string
                          quantity: number
                          unitPrice: number
                      shippingAddress:
                        street: string
                        city: string
                        state: string
                        country: string
                        zip: string
                      comments: string
                      deliveryPreferences:
                        - - contactless_delivery
                          - signature_required
                          - leave_at_door
                          - pickup_from_store
                          - deliver_to_neighbor
                          - schedule_delivery
                      estimatedDelivery: date-time
                  ownerUser: 2c79d9f1-8587-4c90-ad0a-f0c489a48ad3
                  createdAt: 2024-01-22T16:45:00Z
                  updatedAt: 2024-01-22T16:45:00Z
                  lockState: false
                  shared: false
                  settings:
                    temperature: 0
                    rasterizationDPI: 115
                    maxOutputTokens: 0
                    degradedMode: Reject
                    maxTokensSmartExample: 16000
        "400":
          description: "Invalid value for: query parameter reference"
          content:
            text/plain:
              schema:
                type: string
        default:
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      security:
        - oauth2Auth:
            - openid
            - profile
            - email
    post:
      tags:
        - Project Management
      description: "

        Create a new **Project** to define an extraction task.


        #### Body Fields:


        \ Name | Description |

        ------|-------------|

        \ `name` | Name of the **Project**. |

        \ `template` | Template of the **Project**. |

        \ `description` | Text description of the **Project** (can be left
        empty). |

        \ `ownerOrganization` | Optional organization identifier. When
        specified, the project will belong to the given organization instead of
        being a personal project. |


        #### Effect:

        A **Project** is created with default settings:


        \ Setting | Default |

        ---------|---------|

        \ `temperature` | 0.0 |

        \ `rasterizationDPI` | 115 |

        \ `maxOutputTokens` | 0 (no limit) |

        \ `degradedMode` | Reject |

        \ `maxTokensSmartExample` | 16000 |



        If *ownerOrganization* is not provided, the **Project** will be owned by
        the authenticated user.

        When created, a **Project** is not locked and is owned by the
        authenticated user and the organization (if specified in the request).


        #### Response:

        \ The response contains `projectId`, which

        \ is required to modify the **Project**, perform CRUD operations on
        project **Examples** and

        \ project **Playground** items, and run inference for this **Project**.

        \  "
      operationId: postApiProjects
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateProjectRequest"
            example:
              name: "Example: Order Delivery Information Extraction"
              description: "Example: Automated extraction of order delivery details from
                emails and scanned documents"
              template:
                orderId: verbatim-string
                customerId: verbatim-string
                orderDate: date-time
                status:
                  - pending
                  - processed
                  - shipped
                  - delivered
                  - cancelled
                totalAmount: number
                currency: string
                items:
                  - productId: string
                    quantity: number
                    unitPrice: number
                shippingAddress:
                  street: string
                  city: string
                  state: string
                  country: string
                  zip: string
                comments: string
                deliveryPreferences:
                  - - contactless_delivery
                    - signature_required
                    - leave_at_door
                    - pickup_from_store
                    - deliver_to_neighbor
                    - schedule_delivery
                estimatedDelivery: date-time
        required: true
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProjectResponse"
              example:
                id: fbeb32ab-025b-4155-817a-f540d0476f32
                name: "Example: Order Delivery Information Extraction"
                description: "Example: Automated extraction of order delivery details from
                  emails and scanned documents"
                template:
                  type: schema
                  schema:
                    orderId: verbatim-string
                    customerId: verbatim-string
                    orderDate: date-time
                    status:
                      - pending
                      - processed
                      - shipped
                      - delivered
                      - cancelled
                    totalAmount: number
                    currency: string
                    items:
                      - productId: string
                        quantity: number
                        unitPrice: number
                    shippingAddress:
                      street: string
                      city: string
                      state: string
                      country: string
                      zip: string
                    comments: string
                    deliveryPreferences:
                      - - contactless_delivery
                        - signature_required
                        - leave_at_door
                        - pickup_from_store
                        - deliver_to_neighbor
                        - schedule_delivery
                    estimatedDelivery: date-time
                ownerUser: 2c79d9f1-8587-4c90-ad0a-f0c489a48ad3
                createdAt: 2024-01-22T16:45:00Z
                updatedAt: 2024-01-22T16:45:00Z
                lockState: false
                shared: false
                settings:
                  temperature: 0
                  rasterizationDPI: 115
                  maxOutputTokens: 0
                  degradedMode: Reject
                  maxTokensSmartExample: 16000
        "400":
          description: "Invalid value for: body"
          content:
            text/plain:
              schema:
                type: string
        default:
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      security:
        - oauth2Auth:
            - openid
            - profile
            - email
  /api/projects/{projectId}:
    get:
      tags:
        - Project Management
      description: "

        Return the details of a specific **Project**.


        #### Error Responses:

        `404 Not Found` - If a **Project** with the specified `projectId` does
        not exist.


        `403 Forbidden` - If the user does not have permission to view this
        **Project**.

        \  "
      operationId: getApiProjectsProjectid
      parameters:
        - name: projectId
          in: path
          description: Unique project identifier.
          required: true
          schema:
            type: string
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProjectResponse"
              example:
                id: fbeb32ab-025b-4155-817a-f540d0476f32
                name: "Example: Order Delivery Information Extraction"
                description: "Example: Automated extraction of order delivery details from
                  emails and scanned documents"
                template:
                  type: schema
                  schema:
                    orderId: verbatim-string
                    customerId: verbatim-string
                    orderDate: date-time
                    status:
                      - pending
                      - processed
                      - shipped
                      - delivered
                      - cancelled
                    totalAmount: number
                    currency: string
                    items:
                      - productId: string
                        quantity: number
                        unitPrice: number
                    shippingAddress:
                      street: string
                      city: string
                      state: string
                      country: string
                      zip: string
                    comments: string
                    deliveryPreferences:
                      - - contactless_delivery
                        - signature_required
                        - leave_at_door
                        - pickup_from_store
                        - deliver_to_neighbor
                        - schedule_delivery
                    estimatedDelivery: date-time
                ownerUser: 2c79d9f1-8587-4c90-ad0a-f0c489a48ad3
                createdAt: 2024-01-22T16:45:00Z
                updatedAt: 2024-01-22T16:45:00Z
                lockState: false
                shared: false
                settings:
                  temperature: 0
                  rasterizationDPI: 115
                  maxOutputTokens: 0
                  degradedMode: Reject
                  maxTokensSmartExample: 16000
        default:
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      security:
        - oauth2Auth:
            - openid
            - profile
            - email
    delete:
      tags:
        - Project Management
      description: "

        Permanently remove a **Project** and all related data.



        #### Effect:

        Deletes the **Project** together with the associated **Examples** and
        **Playground** items.



        #### Error Responses:

        `404 Not Found` - If a **Project** with the specified projectId does not
        exist.


        `403 Forbidden` - If the user does not have permission to delete this
        **Project**.


        `403 Locked` - If the **Project** is locked.

        \  "
      operationId: deleteApiProjectsProjectid
      parameters:
        - name: projectId
          in: path
          description: Unique project identifier.
          required: true
          schema:
            type: string
      responses:
        "200":
          description: ""
        default:
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      security:
        - oauth2Auth:
            - openid
            - profile
            - email
    patch:
      tags:
        - Project Management
      description: "

        Update the details of an existing **Project**.



        Note that you cannot change the lock or reference (shared) status via
        this endpoint.

        To modify these states, use the lock/unlock and share/unshare project
        endpoints.


        #### Error Responses:

        `404 Not Found` - If a **Project** with the specified `projectId` does
        not exist.


        `403 Forbidden` - If the user does not have permission to update this
        **Project**.


        `403 Locked` - If the **Project** is locked.

        \  "
      operationId: patchApiProjectsProjectid
      parameters:
        - name: projectId
          in: path
          description: Unique project identifier.
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateProjectRequest"
            examples:
              Update Template:
                value:
                  template:
                    orderId: verbatim-string
                    customerId: verbatim-string
                    orderDate: date-time
                    status:
                      - pending
                      - processed
                      - shipped
                      - delivered
                      - cancelled
                    totalAmount: number
                    currency: string
                    items:
                      - productId: string
                        quantity: number
                        unitPrice: number
                    shippingAddress:
                      street: string
                      city: string
                      state: string
                      country: string
                      zip: string
                    comments: string
                    deliveryPreferences:
                      - - contactless_delivery
                        - signature_required
                        - leave_at_door
                        - pickup_from_store
                        - deliver_to_neighbor
                        - schedule_delivery
                    estimatedDelivery: date-time
              Update Project Name:
                value:
                  name: "Example: Order Delivery Information Extraction"
        required: true
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProjectResponse"
              example:
                id: fbeb32ab-025b-4155-817a-f540d0476f32
                name: "Example: Order Delivery Information Extraction"
                description: "Example: Automated extraction of order delivery details from
                  emails and scanned documents"
                template:
                  type: schema
                  schema:
                    orderId: verbatim-string
                    customerId: verbatim-string
                    orderDate: date-time
                    status:
                      - pending
                      - processed
                      - shipped
                      - delivered
                      - cancelled
                    totalAmount: number
                    currency: string
                    items:
                      - productId: string
                        quantity: number
                        unitPrice: number
                    shippingAddress:
                      street: string
                      city: string
                      state: string
                      country: string
                      zip: string
                    comments: string
                    deliveryPreferences:
                      - - contactless_delivery
                        - signature_required
                        - leave_at_door
                        - pickup_from_store
                        - deliver_to_neighbor
                        - schedule_delivery
                    estimatedDelivery: date-time
                ownerUser: 2c79d9f1-8587-4c90-ad0a-f0c489a48ad3
                createdAt: 2024-01-22T16:45:00Z
                updatedAt: 2024-01-22T16:45:00Z
                lockState: false
                shared: false
                settings:
                  temperature: 0
                  rasterizationDPI: 115
                  maxOutputTokens: 0
                  degradedMode: Reject
                  maxTokensSmartExample: 16000
        "400":
          description: "Invalid value for: body"
          content:
            text/plain:
              schema:
                type: string
        default:
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      security:
        - oauth2Auth:
            - openid
            - profile
            - email
  /api/projects/{projectId}/settings:
    patch:
      tags:
        - Project Management
      description: "

        Update the settings of an existing **Project**.



        #### Error Responses:

        `404 Not Found` - If a **Project** with the specified `projectId` does
        not exist.


        `403 Forbidden` - If the user does not have permission to update this
        **Project**.


        `403 Locked` - If the **Project** is locked.

        \  "
      operationId: patchApiProjectsProjectidSettings
      parameters:
        - name: projectId
          in: path
          description: Unique project identifier.
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateProjectSettingsRequest"
            example:
              temperature: 0
              rasterizationDPI: 115
              maxOutputTokens: 0
              degradedMode: Reject
              maxTokensSmartExample: 16000
        required: true
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProjectResponse"
              example:
                id: fbeb32ab-025b-4155-817a-f540d0476f32
                name: "Example: Order Delivery Information Extraction"
                description: "Example: Automated extraction of order delivery details from
                  emails and scanned documents"
                template:
                  type: schema
                  schema:
                    orderId: verbatim-string
                    customerId: verbatim-string
                    orderDate: date-time
                    status:
                      - pending
                      - processed
                      - shipped
                      - delivered
                      - cancelled
                    totalAmount: number
                    currency: string
                    items:
                      - productId: string
                        quantity: number
                        unitPrice: number
                    shippingAddress:
                      street: string
                      city: string
                      state: string
                      country: string
                      zip: string
                    comments: string
                    deliveryPreferences:
                      - - contactless_delivery
                        - signature_required
                        - leave_at_door
                        - pickup_from_store
                        - deliver_to_neighbor
                        - schedule_delivery
                    estimatedDelivery: date-time
                ownerUser: 2c79d9f1-8587-4c90-ad0a-f0c489a48ad3
                createdAt: 2024-01-22T16:45:00Z
                updatedAt: 2024-01-22T16:45:00Z
                lockState: false
                shared: false
                settings:
                  temperature: 0
                  rasterizationDPI: 115
                  maxOutputTokens: 0
                  degradedMode: Reject
                  maxTokensSmartExample: 16000
        "400":
          description: "Invalid value for: body"
          content:
            text/plain:
              schema:
                type: string
        default:
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      security:
        - oauth2Auth:
            - openid
            - profile
            - email
  /api/projects/{projectId}/template:
    put:
      tags:
        - Project Management
      description: "

        Update the template of an existing **Project**.



        #### Error Responses:

        `404 Not Found` - If a **Project** with the specified `projectId` does
        not exist.


        `403 Forbidden` - If the user does not have permission to update this
        **Project**.


        `403 Locked` - If the **Project** is locked.

        \  "
      operationId: putApiProjectsProjectidTemplate
      parameters:
        - name: projectId
          in: path
          description: Unique project identifier.
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateProjectTemplateRequest"
        required: true
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProjectResponse"
              example:
                id: fbeb32ab-025b-4155-817a-f540d0476f32
                name: "Example: Order Delivery Information Extraction"
                description: "Example: Automated extraction of order delivery details from
                  emails and scanned documents"
                template:
                  type: schema
                  schema:
                    orderId: verbatim-string
                    customerId: verbatim-string
                    orderDate: date-time
                    status:
                      - pending
                      - processed
                      - shipped
                      - delivered
                      - cancelled
                    totalAmount: number
                    currency: string
                    items:
                      - productId: string
                        quantity: number
                        unitPrice: number
                    shippingAddress:
                      street: string
                      city: string
                      state: string
                      country: string
                      zip: string
                    comments: string
                    deliveryPreferences:
                      - - contactless_delivery
                        - signature_required
                        - leave_at_door
                        - pickup_from_store
                        - deliver_to_neighbor
                        - schedule_delivery
                    estimatedDelivery: date-time
                ownerUser: 2c79d9f1-8587-4c90-ad0a-f0c489a48ad3
                createdAt: 2024-01-22T16:45:00Z
                updatedAt: 2024-01-22T16:45:00Z
                lockState: false
                shared: false
                settings:
                  temperature: 0
                  rasterizationDPI: 115
                  maxOutputTokens: 0
                  degradedMode: Reject
                  maxTokensSmartExample: 16000
        "400":
          description: "Invalid value for: body"
          content:
            text/plain:
              schema:
                type: string
        default:
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      security:
        - oauth2Auth:
            - openid
            - profile
            - email
  /api/projects/{projectId}/reset-settings:
    post:
      tags:
        - Project Management
      description: "

        Reset the settings of an existing **Project** to their default values.


        Default values are:


        \ Setting | Default |

        -----------|---------|

        \ `temperature` | 0.0 |

        \ `rasterizationDPI` | 115 |

        \ `maxOutputTokens` | 0 (no limit) |

        \ `degradedMode` | Reject |

        \ `maxTokensSmartExample` | 16000 |


        #### Error Responses:

        `404 Not Found` - If a **Project** with the specified `projectId` does
        not exist.


        `403 Forbidden` - If the user does not have permission to update this
        **Project**.


        `403 Locked` - If the **Project** is locked.

        \  "
      operationId: postApiProjectsProjectidReset-settings
      parameters:
        - name: projectId
          in: path
          description: Unique project identifier.
          required: true
          schema:
            type: string
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProjectResponse"
              example:
                id: fbeb32ab-025b-4155-817a-f540d0476f32
                name: "Example: Order Delivery Information Extraction"
                description: "Example: Automated extraction of order delivery details from
                  emails and scanned documents"
                template:
                  type: schema
                  schema:
                    orderId: verbatim-string
                    customerId: verbatim-string
                    orderDate: date-time
                    status:
                      - pending
                      - processed
                      - shipped
                      - delivered
                      - cancelled
                    totalAmount: number
                    currency: string
                    items:
                      - productId: string
                        quantity: number
                        unitPrice: number
                    shippingAddress:
                      street: string
                      city: string
                      state: string
                      country: string
                      zip: string
                    comments: string
                    deliveryPreferences:
                      - - contactless_delivery
                        - signature_required
                        - leave_at_door
                        - pickup_from_store
                        - deliver_to_neighbor
                        - schedule_delivery
                    estimatedDelivery: date-time
                ownerUser: 2c79d9f1-8587-4c90-ad0a-f0c489a48ad3
                createdAt: 2024-01-22T16:45:00Z
                updatedAt: 2024-01-22T16:45:00Z
                lockState: false
                shared: false
                settings:
                  temperature: 0
                  rasterizationDPI: 115
                  maxOutputTokens: 0
                  degradedMode: Reject
                  maxTokensSmartExample: 16000
        default:
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      security:
        - oauth2Auth:
            - openid
            - profile
            - email
  /api/projects/{projectId}/duplicate:
    post:
      tags:
        - Project Management
      description: >
        
        Create a copy of an existing **Project**.


        It is allowed to duplicate locked **Projects** and **Reference
        Projects**.



        #### Effect:

        - The duplicated **Project** retains the same template, settings,
        **Examples** and **Playground Items**.

        - If the target organization is the same as the source, the project name
        is changed to "Original Name (copy)".

        - If the target organization is different from the source, all
        **Documents** associated with the **Project** are copied.


        #### Response:
         The response contains a newly generated
         `projectId`. When duplicated, a new **Project** is always unlocked. The duplicated **Reference Project**
         are private and owned by the authenticated user.

        #### Error Responses:

        `404 Not Found` - If a **Project** with the specified `projectId` does
        not exist.


        `403 Forbidden` - If the user does not have permission to duplicate this
        **Project**.
      operationId: postApiProjectsProjectidDuplicate
      parameters:
        - name: projectId
          in: path
          description: Unique project identifier.
          required: true
          schema:
            type: string
        - name: organizationId
          in: query
          description: Destination organization id. If not specified, the project is
            copied to the user projects.
          required: false
          schema:
            type: string
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProjectResponse"
              example:
                id: fbeb32ab-025b-4155-817a-f540d0476f32
                name: "Example: Order Delivery Information Extraction"
                description: "Example: Automated extraction of order delivery details from
                  emails and scanned documents"
                template:
                  type: schema
                  schema:
                    orderId: verbatim-string
                    customerId: verbatim-string
                    orderDate: date-time
                    status:
                      - pending
                      - processed
                      - shipped
                      - delivered
                      - cancelled
                    totalAmount: number
                    currency: string
                    items:
                      - productId: string
                        quantity: number
                        unitPrice: number
                    shippingAddress:
                      street: string
                      city: string
                      state: string
                      country: string
                      zip: string
                    comments: string
                    deliveryPreferences:
                      - - contactless_delivery
                        - signature_required
                        - leave_at_door
                        - pickup_from_store
                        - deliver_to_neighbor
                        - schedule_delivery
                    estimatedDelivery: date-time
                ownerUser: 2c79d9f1-8587-4c90-ad0a-f0c489a48ad3
                createdAt: 2024-01-22T16:45:00Z
                updatedAt: 2024-01-22T16:45:00Z
                lockState: false
                shared: false
                settings:
                  temperature: 0
                  rasterizationDPI: 115
                  maxOutputTokens: 0
                  degradedMode: Reject
                  maxTokensSmartExample: 16000
        default:
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      security:
        - oauth2Auth:
            - openid
            - profile
            - email
  /api/projects/{projectId}/share:
    post:
      tags:
        - Project Management
      description: >
        
        Turn an existing **Project** into a **Reference Project**.
         Only NuMind administrators can share a **Project** with other users.
         Lock state does not prevent sharing. Likewise, sharing does not change the lock state.

        #### Effect:


        - **Reference Projects** are shared with the community (read access is
        granted to all users).

        - **Project Examples** and **Playground Items** are shared as well.

        - Only NuMind administrators can update or delete **Reference
        Projects**.

        - Only NuMind administrators can create, update, or delete **Examples**
        and **Playground Items** of **Reference Projects**.

        - The inference is allowed for all users.


        #### Error Responses:


        `404 Not Found` - If a **Project** with the specified `projectId` does
        not exist.


        `403 Forbidden` - If the user does not have permission to share projects
        (not NuMind admin).
      operationId: postApiProjectsProjectidShare
      parameters:
        - name: projectId
          in: path
          description: Unique project identifier.
          required: true
          schema:
            type: string
      responses:
        "200":
          description: ""
        default:
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      security:
        - oauth2Auth:
            - openid
            - profile
            - email
  /api/projects/{projectId}/unshare:
    post:
      tags:
        - Project Management
      description: >
        
        Unshare a **Reference Project** (makes it private).

         Lock state does not prevent unsharing. Likewise, unsharing does not change the lock state.
         The project owner is the initial owner, not the authenicated user.


        #### Effect:

        - The **Project** is no longer a **Reference Project** and is no longer
        shared with the community.

        - Read access is revoked for all users except the project owner.

        - **Examples** and **Playground Items** are no longer publicly
        accessible.

        - Only the project owner can manage or delete the project after
        unsharing.

        - Inference is restricted to the project owner.


        #### Error Responses:

        `404 Not Found` - If a **Project** with the specified `projectId` does
        not exist.


        `403 Forbidden` - If the user does not have permission to unshare
        projects (not NuMind admin).
      operationId: postApiProjectsProjectidUnshare
      parameters:
        - name: projectId
          in: path
          description: Unique project identifier.
          required: true
          schema:
            type: string
      responses:
        "200":
          description: ""
        default:
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      security:
        - oauth2Auth:
            - openid
            - profile
            - email
  /api/projects/{projectId}/lock:
    post:
      tags:
        - Project Management
      description: >
        Locks a project to prevent modifications.



        #### Effect:

        - While locked, the **Project** cannot be updated or deleted. Read
        access is still available.

        - CRUD operations on **Examples** are not allowed.

        - Inference is still allowed.

        - CRUD access to **Playground Items** is still available.


        #### Error Responses:
         `404 Not Found` - If a **Project** with the specified `projectId` does not exist.

         `403 Forbidden` - If the user does not have permission to lock this project.
      operationId: postApiProjectsProjectidLock
      parameters:
        - name: projectId
          in: path
          description: Unique project identifier.
          required: true
          schema:
            type: string
      responses:
        "200":
          description: ""
        default:
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      security:
        - oauth2Auth:
            - openid
            - profile
            - email
  /api/projects/{projectId}/unlock:
    post:
      tags:
        - Project Management
      description: >
        
        Unlock a **Project**.


        #### Effect:

        - Once unlocked, the **Project** can be updated or deleted.

        - Full CRUD access to **Examples** is restored.


        #### Error Responses:

        `404 Not Found` - If a **Project** with the specified `projectId` does
        not exist.


        `403 Forbidden` - If the user does not have permission to unlock this
        project.
      operationId: postApiProjectsProjectidUnlock
      parameters:
        - name: projectId
          in: path
          description: Unique project identifier.
          required: true
          schema:
            type: string
      responses:
        "200":
          description: ""
        default:
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      security:
        - oauth2Auth:
            - openid
            - profile
            - email
  /api/files:
    post:
      tags:
        - Files
      description: "

        \ Uploads a new file into a **File**.

        \ Use `/api/files/{fileId}/convert-to-document` to convert this **File**
        to a **Document**.

        \    "
      operationId: postApiFiles
      parameters:
        - name: x-file-name
          in: header
          description: The name of the file to be uploaded.
          required: true
          schema:
            type: string
        - name: x-organization
          in: header
          description: The id of the current organization. This organization will own
            created resources
          required: false
          schema:
            type: string
      requestBody:
        content:
          application/octet-stream:
            schema:
              type: string
              format: binary
        required: true
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FileResponse"
              example:
                fileId: 3c81d3f3-fee9-4235-8393-550f91fd83b9
                fileName: dummy_confirmation_email.pdf
                ownerUser: 2c79d9f1-8587-4c90-ad0a-f0c489a48ad3
                contentType: application/pdf
                createdAt: 2024-01-22T16:45:00Z
        "400":
          description: "Invalid value for: header x-file-name, Invalid value for: body"
          content:
            text/plain:
              schema:
                type: string
        default:
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      security:
        - oauth2Auth:
            - openid
            - profile
            - email
  /api/files/{fileId}:
    get:
      tags:
        - Files
      description: "

        \ Return meta information about a specific **File**.


        #### Error Responses:

        `404 Not Found` - If a **File** with the specified `fileId` does not
        exist.


        `403 Forbidden` - If the user does not have permission to view this
        **File**.

        \    "
      operationId: getApiFilesFileid
      parameters:
        - name: fileId
          in: path
          description: Unique file identifier.
          required: true
          schema:
            type: string
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FileResponse"
              example:
                fileId: 3c81d3f3-fee9-4235-8393-550f91fd83b9
                fileName: dummy_confirmation_email.pdf
                ownerUser: 2c79d9f1-8587-4c90-ad0a-f0c489a48ad3
                contentType: application/pdf
                createdAt: 2024-01-22T16:45:00Z
        default:
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      security:
        - oauth2Auth:
            - openid
            - profile
            - email
  /api/files/{fileId}/content:
    get:
      tags:
        - Files
      description: "

        \ Return the content of a specific **File**.


        #### Error Responses:

        `404 Not Found` - If a **File** with the specified `fileId` does not
        exist.


        `403 Forbidden` - If the user does not have permission to view this
        **File**.

        \   "
      operationId: getApiFilesFileidContent
      parameters:
        - name: fileId
          in: path
          description: Unique file identifier.
          required: true
          schema:
            type: string
      responses:
        "200":
          description: ""
          headers:
            Content-Type:
              description: MIME type of file content
              required: true
              schema:
                type: string
          content:
            application/octet-stream:
              schema:
                type: string
                format: binary
        default:
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      security:
        - oauth2Auth:
            - openid
            - profile
            - email
  /api/files/{fileId}/convert-to-document:
    post:
      tags:
        - Files
      description: >2
        
         Convert the **File** into a **Document**

         - For ***text and image files***, the content is used as-is — no conversion is performed.
         - For ***other supported file types*** (e.g., PDFs, WORD, PPTX, Excel),
         the file is ***converted to an image*** in the background,
         using the **conversion parameters** provided in the request body (e.g., `rasterizationDPI`).

         The resulting image is then saved as a **Document** and can be used for inference or further processing.

         Once saved, this **Document** can be used to perform inference,
         create **Examples**, and/or save **Playground Items** with the text as input.

         
        #### Response:
         The response contains a `documentId`, which is required in order to access and use this **Document**.

        #### Error Responses:

        `404 Not Found` - If a **File** with the specified `fileId` does not
        exist.
      operationId: postApiFilesFileidConvert-to-document
      parameters:
        - name: fileId
          in: path
          description: Unique file identifier.
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ConvertRequest"
        required: true
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DocumentResponse"
              example:
                docInfo:
                  type: image
                  documentId: 81430aea-e74d-429d-9c7a-b462270f96f2
                  fileId: 3c81d3f3-fee9-4235-8393-550f91fd83b9
                  fileName: dummy_confirmation_email.pdf
                  possibleTransformations:
                    - changeDPI
                  dpi: 115
                ownerUser: 2c79d9f1-8587-4c90-ad0a-f0c489a48ad3
                contentType: image/png
                createdAt: 2024-01-22T16:45:00Z
        "400":
          description: "Invalid value for: body"
          content:
            text/plain:
              schema:
                type: string
        default:
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      security:
        - oauth2Auth:
            - openid
            - profile
            - email
  /api/documents/text:
    post:
      tags:
        - Documents
      description: "

        \ Save the text as a **Document**.



        \ Once saved, this **Document** can be used to perform inference,

        \ create **Examples**, and/or save **Playground Items** with the text as
        input.

        \\ 


        #### Response:

        \ The response contains a `documentId`, which is required in order to
        access and use this **Document**.

        \   "
      operationId: postApiDocumentsText
      parameters:
        - name: x-organization
          in: header
          description: The id of the current organization. This organization will own
            created resources
          required: false
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/TextRequest"
            example:
              text: '[EXAMPLE ONLY] Your order (ID: o-89123) has been successfully processed.
                The customer ID for this order is c-20485. It was placed on
                March 10, 2024, at 11:15 AM UTC and is now marked as shipped.
                The total amount charged is $149.99 USD. The items in this order
                include: Product ID p-00876 with a quantity of 1 at a unit price
                of $79.99, and Product ID p-00321 with a quantity of 2 at a unit
                price of $35.00. The shipping address is 782 Pine St, Austin,
                TX, 73301, USA. The customer has requested: "Leave package at
                the front door." Additional delivery preferences include no
                signature required and standard delivery. The estimated delivery
                date is March 15, 2024, by 5:00 PM UTC.'
        required: true
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DocumentResponse"
              example:
                docInfo:
                  type: text
                  documentId: 0d25d758-d475-4c14-aafa-eb5d6a40b670
                  fileId: a1097252-ef1e-48e1-af0e-cd3e199a40f7
                  fileName: dummy_confirmation_email.txt
                  text: '[EXAMPLE ONLY] Your order (ID: o-89123) has been successfully processed.
                    The customer ID for this order is c-20485. It was placed on
                    March 10, 2024, at 11:15 AM UTC and is now marked as
                    shipped. The total amount charged is $149.99 USD. The items
                    in this order include: Product ID p-00876 with a quantity of
                    1 at a unit price of $79.99, and Product ID p-00321 with a
                    quantity of 2 at a unit price of $35.00. The shipping
                    address is 782 Pine St, Austin, TX, 73301, USA. The customer
                    has requested: "Leave package at the front door." Additional
                    delivery preferences include no signature required and
                    standard delivery. The estimated delivery date is March 15,
                    2024, by 5:00 PM UTC.'
                  possibleTransformations: []
                ownerUser: 2c79d9f1-8587-4c90-ad0a-f0c489a48ad3
                contentType: text/plain
                createdAt: 2024-01-22T16:45:00Z
        "400":
          description: "Invalid value for: body"
          content:
            text/plain:
              schema:
                type: string
        default:
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      security:
        - oauth2Auth:
            - openid
            - profile
            - email
  /api/documents/{documentId}:
    get:
      tags:
        - Documents
      description: "

        \ Return meta information about a specific **Document**.

        \ For text **Documents**, this also includes the text content.

        \ In order to access the non-text **Document** content, use the endpoint
        `/api/documents/{documentId}/content`


        #### Error Responses:

        `404 Not Found` - If a **Document** with the specified `documentId` does
        not exist.


        `403 Forbidden` - If the user does not have permission to view this
        **Document**.

        \   "
      operationId: getApiDocumentsDocumentid
      parameters:
        - name: documentId
          in: path
          description: Unique document identifier.
          required: true
          schema:
            type: string
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DocumentResponse"
              examples:
                Text Document:
                  value:
                    docInfo:
                      type: text
                      documentId: 0d25d758-d475-4c14-aafa-eb5d6a40b670
                      fileId: a1097252-ef1e-48e1-af0e-cd3e199a40f7
                      fileName: dummy_confirmation_email.txt
                      text: '[EXAMPLE ONLY] Your order (ID: o-89123) has been successfully processed.
                        The customer ID for this order is c-20485. It was placed
                        on March 10, 2024, at 11:15 AM UTC and is now marked as
                        shipped. The total amount charged is $149.99 USD. The
                        items in this order include: Product ID p-00876 with a
                        quantity of 1 at a unit price of $79.99, and Product ID
                        p-00321 with a quantity of 2 at a unit price of $35.00.
                        The shipping address is 782 Pine St, Austin, TX, 73301,
                        USA. The customer has requested: "Leave package at the
                        front door." Additional delivery preferences include no
                        signature required and standard delivery. The estimated
                        delivery date is March 15, 2024, by 5:00 PM UTC.'
                      possibleTransformations: []
                    ownerUser: 2c79d9f1-8587-4c90-ad0a-f0c489a48ad3
                    contentType: text/plain
                    createdAt: 2024-01-22T16:45:00Z
                Image Document:
                  value:
                    docInfo:
                      type: image
                      documentId: 81430aea-e74d-429d-9c7a-b462270f96f2
                      fileId: 3c81d3f3-fee9-4235-8393-550f91fd83b9
                      fileName: dummy_confirmation_email.pdf
                      possibleTransformations:
                        - changeDPI
                      dpi: 115
                    ownerUser: 2c79d9f1-8587-4c90-ad0a-f0c489a48ad3
                    contentType: image/png
                    createdAt: 2024-01-22T16:45:00Z
        default:
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      security:
        - oauth2Auth:
            - openid
            - profile
            - email
  /api/documents/{documentId}/content:
    get:
      tags:
        - Documents
      description: "

        \ Return the content of a specific **Document**.


        #### Error Responses:

        `404 Not Found` - If a **Document** with the specified `documentId` does
        not exist.


        `403 Forbidden` - If the user does not have permission to view this
        **Document**.

        \   "
      operationId: getApiDocumentsDocumentidContent
      parameters:
        - name: documentId
          in: path
          description: Unique document identifier.
          required: true
          schema:
            type: string
      responses:
        "200":
          description: ""
          headers:
            Content-Type:
              description: MIME type of document content
              required: true
              schema:
                type: string
            Cache-Control:
              required: true
              schema:
                type: string
          content:
            application/octet-stream:
              schema:
                type: string
                format: binary
        default:
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      security:
        - oauth2Auth:
            - openid
            - profile
            - email
  /api/projects/{projectId}/examples:
    get:
      tags:
        - Examples
      description: "

        Return a list of **Examples** associated to the specified **Project**.


        #### Error Responses:

        `404 Not Found` - If a **Project** with the specified `projectId` does
        not exist.


        `403 Forbidden` - If the user does not have permission to view this
        **Project**.

        \  "
      operationId: getApiProjectsProjectidExamples
      parameters:
        - name: projectId
          in: path
          description: Unique project identifier.
          required: true
          schema:
            type: string
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ExampleResponse"
              example:
                - id: a58c1805-3232-412b-897f-af936a750522
                  projectId: fbeb32ab-025b-4155-817a-f540d0476f32
                  ownerUser: 2c79d9f1-8587-4c90-ad0a-f0c489a48ad3
                  documentInfo:
                    type: text
                    documentId: 449af2b9-a3e7-477b-a1c6-13d4d68fa7de
                    fileId: 1b5429c8-d455-4be1-93ce-ce43b4773db8
                    fileName: dummy_example.txt
                    text: '[EXAMPLE ONLY] Your order (ID: o-67214) has been successfully processed.
                      The customer ID for this order is c-76549. It was placed
                      on April 5, 2024, at 8:20 AM UTC and is now marked as
                      pending. The total amount charged is $89.75 USD. The items
                      in this order include: Product ID p-00567 with a quantity
                      of 1 at a unit price of $89.75. The shipping address is
                      123 Elm St, Boston, MA, 02108, USA. The customer has
                      requested: "Hold at pickup location". Additional delivery
                      preferences include scheduled delivery and contactless
                      delivery. The estimated delivery date is April 10, 2024,
                      by 7:00 PM UTC.'
                    possibleTransformations: []
                  result:
                    type: information
                    information:
                      orderId: "Example: o-67214"
                      customerId: "Example: c-76549"
                      orderDate: 2024-04-05T08:20:00.000Z
                      status: pending
                      totalAmount: 89.75
                      currency: USD
                      items:
                        - productId: p-00567
                          quantity: 1
                          unitPrice: 89.75
                      shippingAddress:
                        street: 123 Elm St
                        city: Boston
                        state: MA
                        country: USA
                        zip: "02108"
                      comments: Hold at pickup location.
                      deliveryPreferences:
                        - scheduled_delivery
                        - contactless_delivery
                      estimatedDelivery: 2024-04-10T19:00:00.000Z
                  createdAt: 2024-01-22T16:45:00Z
                  updatedAt: 2024-01-22T16:45:00Z
        default:
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      security:
        - oauth2Auth:
            - openid
            - profile
            - email
    post:
      tags:
        - Examples
      description: "

        Create a new **Example** associated with a specific **Project**.

        An **Example** consists of an (input, output) pair, where the input is
        identified by a `documentId`, and the output represents the expected
        inference result.

        To obtain a `documentId`, use the endpoints under the ***documents***
        tag.

        Once created, this **Example** will be automatically applied to
        subsequent inference calls as an example — unless the output no longer
        aligns with the current template.

        In such cases, the **Example** will be skipped.




        #### Effect:

        \ If the **Project** is a **Reference Project**, the **Document** used
        to create this **Example** will be automatically shared for read access
        to all users.


        #### Response:

        \ The response contains `exampleId`, which is required to update or
        delete this **Example**.


        #### Error Responses:

        `404 Not Found` - If a **Project** with the specified `projectId` does
        not exist or a **Document** with the specified `documentId` does not
        exist.


        `403 Forbidden` - If the user does not have permission to update this
        **Project** or use the specified **Document**.


        `403 Locked` - If the **Project** is locked.

        \  "
      operationId: postApiProjectsProjectidExamples
      parameters:
        - name: projectId
          in: path
          description: Unique project identifier.
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateOrUpdateExampleRequest"
            example:
              documentId: 449af2b9-a3e7-477b-a1c6-13d4d68fa7de
              result:
                orderId: "Example: o-67214"
                customerId: "Example: c-76549"
                orderDate: 2024-04-05T08:20:00.000Z
                status: pending
                totalAmount: 89.75
                currency: USD
                items:
                  - productId: p-00567
                    quantity: 1
                    unitPrice: 89.75
                shippingAddress:
                  street: 123 Elm St
                  city: Boston
                  state: MA
                  country: USA
                  zip: "02108"
                comments: Hold at pickup location.
                deliveryPreferences:
                  - scheduled_delivery
                  - contactless_delivery
                estimatedDelivery: 2024-04-10T19:00:00.000Z
        required: true
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExampleResponse"
              example:
                id: a58c1805-3232-412b-897f-af936a750522
                projectId: fbeb32ab-025b-4155-817a-f540d0476f32
                ownerUser: 2c79d9f1-8587-4c90-ad0a-f0c489a48ad3
                documentInfo:
                  type: text
                  documentId: 449af2b9-a3e7-477b-a1c6-13d4d68fa7de
                  fileId: 1b5429c8-d455-4be1-93ce-ce43b4773db8
                  fileName: dummy_example.txt
                  text: '[EXAMPLE ONLY] Your order (ID: o-67214) has been successfully processed.
                    The customer ID for this order is c-76549. It was placed on
                    April 5, 2024, at 8:20 AM UTC and is now marked as pending.
                    The total amount charged is $89.75 USD. The items in this
                    order include: Product ID p-00567 with a quantity of 1 at a
                    unit price of $89.75. The shipping address is 123 Elm St,
                    Boston, MA, 02108, USA. The customer has requested: "Hold at
                    pickup location". Additional delivery preferences include
                    scheduled delivery and contactless delivery. The estimated
                    delivery date is April 10, 2024, by 7:00 PM UTC.'
                  possibleTransformations: []
                result:
                  type: information
                  information:
                    orderId: "Example: o-67214"
                    customerId: "Example: c-76549"
                    orderDate: 2024-04-05T08:20:00.000Z
                    status: pending
                    totalAmount: 89.75
                    currency: USD
                    items:
                      - productId: p-00567
                        quantity: 1
                        unitPrice: 89.75
                    shippingAddress:
                      street: 123 Elm St
                      city: Boston
                      state: MA
                      country: USA
                      zip: "02108"
                    comments: Hold at pickup location.
                    deliveryPreferences:
                      - scheduled_delivery
                      - contactless_delivery
                    estimatedDelivery: 2024-04-10T19:00:00.000Z
                createdAt: 2024-01-22T16:45:00Z
                updatedAt: 2024-01-22T16:45:00Z
        "400":
          description: "Invalid value for: body"
          content:
            text/plain:
              schema:
                type: string
        default:
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      security:
        - oauth2Auth:
            - openid
            - profile
            - email
  /api/projects/{projectId}/examples/{exampleId}:
    get:
      tags:
        - Examples
      description: "

        Return a specific **Example**.


        #### Error Responses:

        `404 Not Found` - If an **Example** with the specified `exampleId`
        associated with the given `projectId` does not exist.


        `403 Forbidden` - If the user does not have permission to view this
        **Project**.

        \  "
      operationId: getApiProjectsProjectidExamplesExampleid
      parameters:
        - name: projectId
          in: path
          description: Unique project identifier.
          required: true
          schema:
            type: string
        - name: exampleId
          in: path
          description: Unique example identifier.
          required: true
          schema:
            type: string
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExampleResponse"
              example:
                id: a58c1805-3232-412b-897f-af936a750522
                projectId: fbeb32ab-025b-4155-817a-f540d0476f32
                ownerUser: 2c79d9f1-8587-4c90-ad0a-f0c489a48ad3
                documentInfo:
                  type: text
                  documentId: 449af2b9-a3e7-477b-a1c6-13d4d68fa7de
                  fileId: 1b5429c8-d455-4be1-93ce-ce43b4773db8
                  fileName: dummy_example.txt
                  text: '[EXAMPLE ONLY] Your order (ID: o-67214) has been successfully processed.
                    The customer ID for this order is c-76549. It was placed on
                    April 5, 2024, at 8:20 AM UTC and is now marked as pending.
                    The total amount charged is $89.75 USD. The items in this
                    order include: Product ID p-00567 with a quantity of 1 at a
                    unit price of $89.75. The shipping address is 123 Elm St,
                    Boston, MA, 02108, USA. The customer has requested: "Hold at
                    pickup location". Additional delivery preferences include
                    scheduled delivery and contactless delivery. The estimated
                    delivery date is April 10, 2024, by 7:00 PM UTC.'
                  possibleTransformations: []
                result:
                  type: information
                  information:
                    orderId: "Example: o-67214"
                    customerId: "Example: c-76549"
                    orderDate: 2024-04-05T08:20:00.000Z
                    status: pending
                    totalAmount: 89.75
                    currency: USD
                    items:
                      - productId: p-00567
                        quantity: 1
                        unitPrice: 89.75
                    shippingAddress:
                      street: 123 Elm St
                      city: Boston
                      state: MA
                      country: USA
                      zip: "02108"
                    comments: Hold at pickup location.
                    deliveryPreferences:
                      - scheduled_delivery
                      - contactless_delivery
                    estimatedDelivery: 2024-04-10T19:00:00.000Z
                createdAt: 2024-01-22T16:45:00Z
                updatedAt: 2024-01-22T16:45:00Z
        default:
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      security:
        - oauth2Auth:
            - openid
            - profile
            - email
    put:
      tags:
        - Examples
      description: "

        Update a specific **Example**.


        #### Error Responses:

        `404 Not Found` - If an **Example** with the specified `exampleId`
        associated with the given `projectId` does not exist, or if a
        **Document** with the specified `documentId` cannot be found.


        `403 Forbidden` - If the user does not have permission to update this
        **Project** or use the specified **Document**.


        `403 Locked` - If the **Project** is locked.

        \  "
      operationId: putApiProjectsProjectidExamplesExampleid
      parameters:
        - name: projectId
          in: path
          description: Unique project identifier.
          required: true
          schema:
            type: string
        - name: exampleId
          in: path
          description: Unique example identifier.
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateOrUpdateExampleRequest"
            example:
              documentId: 449af2b9-a3e7-477b-a1c6-13d4d68fa7de
              result:
                orderId: "Example: o-67214"
                customerId: "Example: c-76549"
                orderDate: 2024-04-05T08:20:00.000Z
                status: pending
                totalAmount: 89.75
                currency: USD
                items:
                  - productId: p-00567
                    quantity: 1
                    unitPrice: 89.75
                shippingAddress:
                  street: 123 Elm St
                  city: Boston
                  state: MA
                  country: USA
                  zip: "02108"
                comments: Hold at pickup location.
                deliveryPreferences:
                  - scheduled_delivery
                  - contactless_delivery
                estimatedDelivery: 2024-04-10T19:00:00.000Z
        required: true
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExampleResponse"
              example:
                id: a58c1805-3232-412b-897f-af936a750522
                projectId: fbeb32ab-025b-4155-817a-f540d0476f32
                ownerUser: 2c79d9f1-8587-4c90-ad0a-f0c489a48ad3
                documentInfo:
                  type: text
                  documentId: 449af2b9-a3e7-477b-a1c6-13d4d68fa7de
                  fileId: 1b5429c8-d455-4be1-93ce-ce43b4773db8
                  fileName: dummy_example.txt
                  text: '[EXAMPLE ONLY] Your order (ID: o-67214) has been successfully processed.
                    The customer ID for this order is c-76549. It was placed on
                    April 5, 2024, at 8:20 AM UTC and is now marked as pending.
                    The total amount charged is $89.75 USD. The items in this
                    order include: Product ID p-00567 with a quantity of 1 at a
                    unit price of $89.75. The shipping address is 123 Elm St,
                    Boston, MA, 02108, USA. The customer has requested: "Hold at
                    pickup location". Additional delivery preferences include
                    scheduled delivery and contactless delivery. The estimated
                    delivery date is April 10, 2024, by 7:00 PM UTC.'
                  possibleTransformations: []
                result:
                  type: information
                  information:
                    orderId: "Example: o-67214"
                    customerId: "Example: c-76549"
                    orderDate: 2024-04-05T08:20:00.000Z
                    status: pending
                    totalAmount: 89.75
                    currency: USD
                    items:
                      - productId: p-00567
                        quantity: 1
                        unitPrice: 89.75
                    shippingAddress:
                      street: 123 Elm St
                      city: Boston
                      state: MA
                      country: USA
                      zip: "02108"
                    comments: Hold at pickup location.
                    deliveryPreferences:
                      - scheduled_delivery
                      - contactless_delivery
                    estimatedDelivery: 2024-04-10T19:00:00.000Z
                createdAt: 2024-01-22T16:45:00Z
                updatedAt: 2024-01-22T16:45:00Z
        "400":
          description: "Invalid value for: body"
          content:
            text/plain:
              schema:
                type: string
        default:
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      security:
        - oauth2Auth:
            - openid
            - profile
            - email
    delete:
      tags:
        - Examples
      description: "

        Delete a specific **Example**.


        #### Error Responses:

        `404 Not Found` - If an **Example** with the specified `exampleId`
        associated with the given `projectId` does not exist.


        `403 Forbidden` - If the user does not have permission to update this
        **Project**.


        `403 Locked` - If the **Project** is locked.

        \  "
      operationId: deleteApiProjectsProjectidExamplesExampleid
      parameters:
        - name: projectId
          in: path
          description: Unique project identifier.
          required: true
          schema:
            type: string
        - name: exampleId
          in: path
          description: Unique example identifier.
          required: true
          schema:
            type: string
      responses:
        "200":
          description: ""
        default:
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      security:
        - oauth2Auth:
            - openid
            - profile
            - email
  /api/projects/{projectId}/infer-text:
    post:
      tags:
        - Inference
      description: "

        \ Perform information extraction inference on the provided text.

        \ The text content must be compatible with the template of the project.

        \ Inference **temperature** can be set in the project settings.



        #### Response:

        \ Returns a JSON representing the inference result.

        \ The ***result*** field is guaranteed to conform to the template.

        \ If the model returns an invalid response, the ***result*** contains an
        empty template.\ 

        \ In this case, the raw response is additionally included in
        ***rawResponse*** field,\ 

        \ together with the error message.\ 

        \ Additionally, the response contains `documentId`, which allows to
        reuse this text **Document** in the future.


        #### Error Responses:

        `404 Not Found` - If a **Project** with the specified `projectId` does
        not exist.


        `403 Forbidden` - If the user does not have permission to run inference
        on this **Project**.

        \   "
      operationId: postApiProjectsProjectidInfer-text
      parameters:
        - name: projectId
          in: path
          description: Unique project identifier.
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/TextRequest"
            example:
              text: '[EXAMPLE ONLY] Your order (ID: o-89123) has been successfully processed.
                The customer ID for this order is c-20485. It was placed on
                March 10, 2024, at 11:15 AM UTC and is now marked as shipped.
                The total amount charged is $149.99 USD. The items in this order
                include: Product ID p-00876 with a quantity of 1 at a unit price
                of $79.99, and Product ID p-00321 with a quantity of 2 at a unit
                price of $35.00. The shipping address is 782 Pine St, Austin,
                TX, 73301, USA. The customer has requested: "Leave package at
                the front door." Additional delivery preferences include no
                signature required and standard delivery. The estimated delivery
                date is March 15, 2024, by 5:00 PM UTC.'
        required: true
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InferenceResponse"
              example:
                result:
                  orderId: "Example: o-89123"
                  customerId: "Example: c-20485"
                  orderDate: 2024-03-10T11:15:00.000Z
                  status: shipped
                  totalAmount: 149.99
                  currency: USD
                  items:
                    - productId: p-00876
                      quantity: 1
                      unitPrice: 79.99
                    - productId: p-00321
                      quantity: 2
                      unitPrice: 35
                  shippingAddress:
                    street: 782 Pine St
                    city: Austin
                    state: TX
                    country: USA
                    zip: "73301"
                  comments: Leave package at the front door.
                  deliveryPreferences:
                    - no_signature_required
                    - standard_delivery
                  estimatedDelivery: 2024-03-15T17:00:00.000Z
                documentInfo:
                  type: text
                  documentId: 0d25d758-d475-4c14-aafa-eb5d6a40b670
                  fileId: a1097252-ef1e-48e1-af0e-cd3e199a40f7
                  fileName: dummy_confirmation_email.txt
                  text: '[EXAMPLE ONLY] Your order (ID: o-89123) has been successfully processed.
                    The customer ID for this order is c-20485. It was placed on
                    March 10, 2024, at 11:15 AM UTC and is now marked as
                    shipped. The total amount charged is $149.99 USD. The items
                    in this order include: Product ID p-00876 with a quantity of
                    1 at a unit price of $79.99, and Product ID p-00321 with a
                    quantity of 2 at a unit price of $35.00. The shipping
                    address is 782 Pine St, Austin, TX, 73301, USA. The customer
                    has requested: "Leave package at the front door." Additional
                    delivery preferences include no signature required and
                    standard delivery. The estimated delivery date is March 15,
                    2024, by 5:00 PM UTC.'
                  possibleTransformations: []
                completionTokens: 400
                promptTokens: 267
                totalTokens: 667
                logprobs: -0.23
        "400":
          description: "Invalid value for: body"
          content:
            text/plain:
              schema:
                type: string
        default:
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      security:
        - oauth2Auth:
            - openid
            - profile
            - email
  /api/projects/{projectId}/infer-text-async:
    post:
      tags:
        - Inference
      description: Start text inference as async job
      operationId: postApiProjectsProjectidInfer-text-async
      parameters:
        - name: projectId
          in: path
          description: Unique project identifier.
          required: true
          schema:
            type: string
        - name: timeout
          in: query
          description: max time to wait for the processing completion
          required: false
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/TextRequest"
            example:
              text: '[EXAMPLE ONLY] Your order (ID: o-89123) has been successfully processed.
                The customer ID for this order is c-20485. It was placed on
                March 10, 2024, at 11:15 AM UTC and is now marked as shipped.
                The total amount charged is $149.99 USD. The items in this order
                include: Product ID p-00876 with a quantity of 1 at a unit price
                of $79.99, and Product ID p-00321 with a quantity of 2 at a unit
                price of $35.00. The shipping address is 782 Pine St, Austin,
                TX, 73301, USA. The customer has requested: "Leave package at
                the front door." Additional delivery preferences include no
                signature required and standard delivery. The estimated delivery
                date is March 15, 2024, by 5:00 PM UTC.'
        required: true
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/JobIdResponse"
              example:
                jobId: 550e8400-e29b-41d4-a716-446655440000
        "400":
          description: "Invalid value for: body"
          content:
            text/plain:
              schema:
                type: string
        default:
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      security:
        - oauth2Auth:
            - openid
            - profile
            - email
  /api/projects/{projectId}/infer-document/{documentId}:
    post:
      tags:
        - Inference
      description: "

        \ Performs information extraction inference on a specific **Document**.

        \ The **Document** content must be compatible with the template of the
        project.

        \ Inference **temperature** can be set in the project settings.


        #### Response:

        \ The ***result*** field is guaranteed to conform to the template.

        \ If the model returns an invalid response, the ***result*** contains an
        empty template.\ 

        \ In this case, the raw response is additionally included in
        ***rawResponse*** field,\ 

        \ together with the error message.


        #### Error Responses:

        `404 Not Found` - If a **Document** with the given `documentId`, or a
        **Project** with the specified `projectId` does not exist.


        `403 Forbidden` - If the user does not have permission to use this
        **Document** or run inference on this **Project**.

        \   "
      operationId: postApiProjectsProjectidInfer-documentDocumentid
      parameters:
        - name: projectId
          in: path
          description: Unique project identifier.
          required: true
          schema:
            type: string
        - name: documentId
          in: path
          description: Unique document identifier.
          required: true
          schema:
            type: string
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InferenceResponse"
              example:
                result:
                  orderId: "Example: o-89123"
                  customerId: "Example: c-20485"
                  orderDate: 2024-03-10T11:15:00.000Z
                  status: shipped
                  totalAmount: 149.99
                  currency: USD
                  items:
                    - productId: p-00876
                      quantity: 1
                      unitPrice: 79.99
                    - productId: p-00321
                      quantity: 2
                      unitPrice: 35
                  shippingAddress:
                    street: 782 Pine St
                    city: Austin
                    state: TX
                    country: USA
                    zip: "73301"
                  comments: Leave package at the front door.
                  deliveryPreferences:
                    - no_signature_required
                    - standard_delivery
                  estimatedDelivery: 2024-03-15T17:00:00.000Z
                documentInfo:
                  type: text
                  documentId: 0d25d758-d475-4c14-aafa-eb5d6a40b670
                  fileId: a1097252-ef1e-48e1-af0e-cd3e199a40f7
                  fileName: dummy_confirmation_email.txt
                  text: '[EXAMPLE ONLY] Your order (ID: o-89123) has been successfully processed.
                    The customer ID for this order is c-20485. It was placed on
                    March 10, 2024, at 11:15 AM UTC and is now marked as
                    shipped. The total amount charged is $149.99 USD. The items
                    in this order include: Product ID p-00876 with a quantity of
                    1 at a unit price of $79.99, and Product ID p-00321 with a
                    quantity of 2 at a unit price of $35.00. The shipping
                    address is 782 Pine St, Austin, TX, 73301, USA. The customer
                    has requested: "Leave package at the front door." Additional
                    delivery preferences include no signature required and
                    standard delivery. The estimated delivery date is March 15,
                    2024, by 5:00 PM UTC.'
                  possibleTransformations: []
                completionTokens: 400
                promptTokens: 267
                totalTokens: 667
                logprobs: -0.23
        default:
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      security:
        - oauth2Auth:
            - openid
            - profile
            - email
  /api/projects/{projectId}/infer-document-async/{documentId}:
    post:
      tags:
        - Inference
      description: Start document inference as async job
      operationId: postApiProjectsProjectidInfer-document-asyncDocumentid
      parameters:
        - name: projectId
          in: path
          description: Unique project identifier.
          required: true
          schema:
            type: string
        - name: documentId
          in: path
          description: Unique document identifier.
          required: true
          schema:
            type: string
        - name: timeout
          in: query
          description: max time to wait for the processing completion
          required: false
          schema:
            type: string
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/JobIdResponse"
              example:
                jobId: 550e8400-e29b-41d4-a716-446655440000
        default:
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      security:
        - oauth2Auth:
            - openid
            - profile
            - email
  /api/infer-template:
    post:
      tags:
        - Inference
      description: "

        \ Derive a template from the provided natural language description.

        \ Potentially, this endpoint can equally be used to correct the template
        to conform to the NuExtract standard.

        \ The resulting template is a JSON object that can be used as a project
        template.



        #### Response:

        \ Returns a JSON representing the derived template.

        \ The response is an empty template if the derivation fails.


        \   "
      operationId: postApiInfer-template
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/TemplateRequest"
            example:
              description: "[EXAMPLE ONLY] Create a template that extracts key information
                from an order confirmation email. The template should be able to
                pull details like the order ID, customer ID, date and time of
                the order, status, total amount, currency, item details (product
                ID, quantity, and unit price), shipping address, any customer
                requests or delivery preferences, and the estimated delivery
                date."
        required: true
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Obj1"
              example:
                orderId: verbatim-string
                customerId: verbatim-string
                orderDate: date-time
                status:
                  - pending
                  - processed
                  - shipped
                  - delivered
                  - cancelled
                totalAmount: number
                currency: string
                items:
                  - productId: string
                    quantity: number
                    unitPrice: number
                shippingAddress:
                  street: string
                  city: string
                  state: string
                  country: string
                  zip: string
                comments: string
                deliveryPreferences:
                  - - contactless_delivery
                    - signature_required
                    - leave_at_door
                    - pickup_from_store
                    - deliver_to_neighbor
                    - schedule_delivery
                estimatedDelivery: date-time
        "400":
          description: "Invalid value for: body"
          content:
            text/plain:
              schema:
                type: string
        default:
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      security:
        - oauth2Auth:
            - openid
            - profile
            - email
  /api/infer-template-async:
    post:
      tags:
        - Inference
      description: "

        \ Derive a template from the provided natural language description.

        \ Potentially, this endpoint can equally be used to correct the template
        to conform to the NuExtract standard.

        \ The resulting template is a JSON object that can be used as a project
        template.



        #### Response:

        \ Returns a JSON representing the derived template.

        \ The response is an empty template if the derivation fails.


        \   "
      operationId: postApiInfer-template-async
      parameters:
        - name: timeout
          in: query
          description: max time to wait for the processing completion
          required: false
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/TemplateRequest"
            example:
              description: "[EXAMPLE ONLY] Create a template that extracts key information
                from an order confirmation email. The template should be able to
                pull details like the order ID, customer ID, date and time of
                the order, status, total amount, currency, item details (product
                ID, quantity, and unit price), shipping address, any customer
                requests or delivery preferences, and the estimated delivery
                date."
        required: true
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/JobIdResponse"
              example:
                jobId: 550e8400-e29b-41d4-a716-446655440000
        "400":
          description: "Invalid value for: body"
          content:
            text/plain:
              schema:
                type: string
        default:
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      security:
        - oauth2Auth:
            - openid
            - profile
            - email
  /api/infer-template/file:
    post:
      tags:
        - Inference
      description: "

        \ Derive a template from the provided **File**.

        \ The **File** can be a text document, an image, or any document that
        can be converted to an image (e.g. PDF, Excel, etc.).

        \ The resulting template is a JSON object that can be used as a project
        template.



        #### Response:

        \ Returns a JSON representing the derived template.

        \ The response is an empty template if the derivation fails.


        \   "
      operationId: postApiInfer-templateFile
      parameters:
        - name: rasterizationDPI
          in: query
          description: >-
            Resolution used to convert formatted documents (PDFs, etc.) to
            images, in dot per inch (optional).  

            Ranges between 1 and 300. If not specified, the default value 115
            DPI is used.  

            If the file is already an image or a text, this parameter is
            ignored.
          required: false
          schema:
            type: integer
            format: int32
            exclusiveMinimum: 0
            maximum: 300
      requestBody:
        content:
          application/octet-stream:
            schema:
              type: string
              format: binary
        required: true
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Obj1"
              example:
                orderId: verbatim-string
                customerId: verbatim-string
                orderDate: date-time
                status:
                  - pending
                  - processed
                  - shipped
                  - delivered
                  - cancelled
                totalAmount: number
                currency: string
                items:
                  - productId: string
                    quantity: number
                    unitPrice: number
                shippingAddress:
                  street: string
                  city: string
                  state: string
                  country: string
                  zip: string
                comments: string
                deliveryPreferences:
                  - - contactless_delivery
                    - signature_required
                    - leave_at_door
                    - pickup_from_store
                    - deliver_to_neighbor
                    - schedule_delivery
                estimatedDelivery: date-time
        "400":
          description: "Invalid value for: query parameter rasterizationDPI, Invalid value
            for: body"
          content:
            text/plain:
              schema:
                type: string
        default:
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      security:
        - oauth2Auth:
            - openid
            - profile
            - email
  /api/infer-template/document/{documentId}:
    post:
      tags:
        - Inference
      description: "

        \ Derive a template from the provided **Document**.



        #### Response:

        \ Returns a JSON representing the derived template.

        \ The response is an empty template if the derivation fails.


        \   "
      operationId: postApiInfer-templateDocumentDocumentid
      parameters:
        - name: documentId
          in: path
          description: Unique document identifier.
          required: true
          schema:
            type: string
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Obj1"
              example:
                orderId: verbatim-string
                customerId: verbatim-string
                orderDate: date-time
                status:
                  - pending
                  - processed
                  - shipped
                  - delivered
                  - cancelled
                totalAmount: number
                currency: string
                items:
                  - productId: string
                    quantity: number
                    unitPrice: number
                shippingAddress:
                  street: string
                  city: string
                  state: string
                  country: string
                  zip: string
                comments: string
                deliveryPreferences:
                  - - contactless_delivery
                    - signature_required
                    - leave_at_door
                    - pickup_from_store
                    - deliver_to_neighbor
                    - schedule_delivery
                estimatedDelivery: date-time
        default:
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      security:
        - oauth2Auth:
            - openid
            - profile
            - email
  /api/infer-template-async/document/{documentId}:
    post:
      tags:
        - Inference
      description: "

        \ Derive a template from the provided **Document**.



        #### Response:

        \ Returns a JSON representing the derived template.

        \ The response is an empty template if the derivation fails.


        \   "
      operationId: postApiInfer-template-asyncDocumentDocumentid
      parameters:
        - name: documentId
          in: path
          description: Unique document identifier.
          required: true
          schema:
            type: string
        - name: timeout
          in: query
          description: max time to wait for the processing completion
          required: false
          schema:
            type: string
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/JobIdResponse"
              example:
                jobId: 550e8400-e29b-41d4-a716-446655440000
        default:
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      security:
        - oauth2Auth:
            - openid
            - profile
            - email
  /api/projects/{projectId}/playground:
    get:
      tags:
        - Playground
      description: "

        Return a list of **Playground Items** associated to the specified
        **Project**.


        #### Error Responses:

        `404 Not Found` - If a **Project** with the specified `projectId` does
        not exist.


        `403 Forbidden` - If the user does not have permission to view this
        **Project**.

        \  "
      operationId: getApiProjectsProjectidPlayground
      parameters:
        - name: projectId
          in: path
          description: Unique project identifier.
          required: true
          schema:
            type: string
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/PlaygroundItemResponse"
              example:
                - id: 0c6a5b79-55e4-4be7-af9b-ef46e3f3640c
                  projectId: fbeb32ab-025b-4155-817a-f540d0476f32
                  ownerUser: 2c79d9f1-8587-4c90-ad0a-f0c489a48ad3
                  documentInfo:
                    type: text
                    documentId: 0d25d758-d475-4c14-aafa-eb5d6a40b670
                    fileId: a1097252-ef1e-48e1-af0e-cd3e199a40f7
                    fileName: dummy_confirmation_email.txt
                    text: '[EXAMPLE ONLY] Your order (ID: o-89123) has been successfully processed.
                      The customer ID for this order is c-20485. It was placed
                      on March 10, 2024, at 11:15 AM UTC and is now marked as
                      shipped. The total amount charged is $149.99 USD. The
                      items in this order include: Product ID p-00876 with a
                      quantity of 1 at a unit price of $79.99, and Product ID
                      p-00321 with a quantity of 2 at a unit price of $35.00.
                      The shipping address is 782 Pine St, Austin, TX, 73301,
                      USA. The customer has requested: "Leave package at the
                      front door." Additional delivery preferences include no
                      signature required and standard delivery. The estimated
                      delivery date is March 15, 2024, by 5:00 PM UTC.'
                    possibleTransformations: []
                  result:
                    type: information
                    information:
                      orderId: "Example: o-89123"
                      customerId: "Example: c-20485"
                      orderDate: 2024-03-10T11:15:00.000Z
                      status: shipped
                      totalAmount: 149.99
                      currency: USD
                      items:
                        - productId: p-00876
                          quantity: 1
                          unitPrice: 79.99
                        - productId: p-00321
                          quantity: 2
                          unitPrice: 35
                      shippingAddress:
                        street: 782 Pine St
                        city: Austin
                        state: TX
                        country: USA
                        zip: "73301"
                      comments: Leave package at the front door.
                      deliveryPreferences:
                        - no_signature_required
                        - standard_delivery
                      estimatedDelivery: 2024-03-15T17:00:00.000Z
                  createdAt: 2024-01-22T16:45:00Z
                  updatedAt: 2024-01-22T16:45:00Z
                  totalTokens: 567
                  completionTokens: 267
                  promptTokens: 300
        default:
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      security:
        - oauth2Auth:
            - openid
            - profile
            - email
    post:
      tags:
        - Playground
      description: "

        Create a new **Playground Item** associated to the specified
        **Project**.


        #### Error Responses:

        `404 Not Found` - If a **Project** with the specified `projectId` does
        not exist or a **Document** with the specified `documentId` does not
        exist.


        `403 Forbidden` - If the user does not have permission to update this
        **Project** or use the specified **Document**.

        \  "
      operationId: postApiProjectsProjectidPlayground
      parameters:
        - name: projectId
          in: path
          description: Unique project identifier.
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateOrUpdatePlaygroundItemRequest"
            example:
              documentId: 0d25d758-d475-4c14-aafa-eb5d6a40b670
              result:
                orderId: "Example: o-89123"
                customerId: "Example: c-20485"
                orderDate: 2024-03-10T11:15:00.000Z
                status: shipped
                totalAmount: 149.99
                currency: USD
                items:
                  - productId: p-00876
                    quantity: 1
                    unitPrice: 79.99
                  - productId: p-00321
                    quantity: 2
                    unitPrice: 35
                shippingAddress:
                  street: 782 Pine St
                  city: Austin
                  state: TX
                  country: USA
                  zip: "73301"
                comments: Leave package at the front door.
                deliveryPreferences:
                  - no_signature_required
                  - standard_delivery
                estimatedDelivery: 2024-03-15T17:00:00.000Z
              totalTokens: 567
              completionTokens: 267
              promptTokens: 300
        required: true
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PlaygroundItemResponse"
              example:
                id: 0c6a5b79-55e4-4be7-af9b-ef46e3f3640c
                projectId: fbeb32ab-025b-4155-817a-f540d0476f32
                ownerUser: 2c79d9f1-8587-4c90-ad0a-f0c489a48ad3
                documentInfo:
                  type: text
                  documentId: 0d25d758-d475-4c14-aafa-eb5d6a40b670
                  fileId: a1097252-ef1e-48e1-af0e-cd3e199a40f7
                  fileName: dummy_confirmation_email.txt
                  text: '[EXAMPLE ONLY] Your order (ID: o-89123) has been successfully processed.
                    The customer ID for this order is c-20485. It was placed on
                    March 10, 2024, at 11:15 AM UTC and is now marked as
                    shipped. The total amount charged is $149.99 USD. The items
                    in this order include: Product ID p-00876 with a quantity of
                    1 at a unit price of $79.99, and Product ID p-00321 with a
                    quantity of 2 at a unit price of $35.00. The shipping
                    address is 782 Pine St, Austin, TX, 73301, USA. The customer
                    has requested: "Leave package at the front door." Additional
                    delivery preferences include no signature required and
                    standard delivery. The estimated delivery date is March 15,
                    2024, by 5:00 PM UTC.'
                  possibleTransformations: []
                result:
                  type: information
                  information:
                    orderId: "Example: o-89123"
                    customerId: "Example: c-20485"
                    orderDate: 2024-03-10T11:15:00.000Z
                    status: shipped
                    totalAmount: 149.99
                    currency: USD
                    items:
                      - productId: p-00876
                        quantity: 1
                        unitPrice: 79.99
                      - productId: p-00321
                        quantity: 2
                        unitPrice: 35
                    shippingAddress:
                      street: 782 Pine St
                      city: Austin
                      state: TX
                      country: USA
                      zip: "73301"
                    comments: Leave package at the front door.
                    deliveryPreferences:
                      - no_signature_required
                      - standard_delivery
                    estimatedDelivery: 2024-03-15T17:00:00.000Z
                createdAt: 2024-01-22T16:45:00Z
                updatedAt: 2024-01-22T16:45:00Z
                totalTokens: 567
                completionTokens: 267
                promptTokens: 300
        "400":
          description: "Invalid value for: body"
          content:
            text/plain:
              schema:
                type: string
        default:
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      security:
        - oauth2Auth:
            - openid
            - profile
            - email
  /api/projects/{projectId}/playground/{playgroundItemId}:
    get:
      tags:
        - Playground
      description: "

        Return a specific **Playground Item**.


        #### Error Responses:

        `404 Not Found` - If a **Playground Item** with the specified
        `playgroundItemId` associated with the given `projectId` does not exist.


        `403 Forbidden` - If the user does not have permission to view this
        **Project**.

        \  "
      operationId: getApiProjectsProjectidPlaygroundPlaygrounditemid
      parameters:
        - name: projectId
          in: path
          description: Unique project identifier.
          required: true
          schema:
            type: string
        - name: playgroundItemId
          in: path
          description: Unique playground item identifier.
          required: true
          schema:
            type: string
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PlaygroundItemResponse"
              example:
                id: 0c6a5b79-55e4-4be7-af9b-ef46e3f3640c
                projectId: fbeb32ab-025b-4155-817a-f540d0476f32
                ownerUser: 2c79d9f1-8587-4c90-ad0a-f0c489a48ad3
                documentInfo:
                  type: text
                  documentId: 0d25d758-d475-4c14-aafa-eb5d6a40b670
                  fileId: a1097252-ef1e-48e1-af0e-cd3e199a40f7
                  fileName: dummy_confirmation_email.txt
                  text: '[EXAMPLE ONLY] Your order (ID: o-89123) has been successfully processed.
                    The customer ID for this order is c-20485. It was placed on
                    March 10, 2024, at 11:15 AM UTC and is now marked as
                    shipped. The total amount charged is $149.99 USD. The items
                    in this order include: Product ID p-00876 with a quantity of
                    1 at a unit price of $79.99, and Product ID p-00321 with a
                    quantity of 2 at a unit price of $35.00. The shipping
                    address is 782 Pine St, Austin, TX, 73301, USA. The customer
                    has requested: "Leave package at the front door." Additional
                    delivery preferences include no signature required and
                    standard delivery. The estimated delivery date is March 15,
                    2024, by 5:00 PM UTC.'
                  possibleTransformations: []
                result:
                  type: information
                  information:
                    orderId: "Example: o-89123"
                    customerId: "Example: c-20485"
                    orderDate: 2024-03-10T11:15:00.000Z
                    status: shipped
                    totalAmount: 149.99
                    currency: USD
                    items:
                      - productId: p-00876
                        quantity: 1
                        unitPrice: 79.99
                      - productId: p-00321
                        quantity: 2
                        unitPrice: 35
                    shippingAddress:
                      street: 782 Pine St
                      city: Austin
                      state: TX
                      country: USA
                      zip: "73301"
                    comments: Leave package at the front door.
                    deliveryPreferences:
                      - no_signature_required
                      - standard_delivery
                    estimatedDelivery: 2024-03-15T17:00:00.000Z
                createdAt: 2024-01-22T16:45:00Z
                updatedAt: 2024-01-22T16:45:00Z
                totalTokens: 567
                completionTokens: 267
                promptTokens: 300
        default:
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      security:
        - oauth2Auth:
            - openid
            - profile
            - email
    put:
      tags:
        - Playground
      description: "

        Update a specific **Playground Item**.


        #### Error Responses:

        `404 Not Found` - If a **Playground Item** with the specified
        `playgroundItemId` associated with the given `projectId` does not exist,
        or if a **Document** with the specified `documentId` cannot be found.


        `403 Forbidden` - If the user does not have permission to update this
        **Project** or use the specified **Document**.

        \  "
      operationId: putApiProjectsProjectidPlaygroundPlaygrounditemid
      parameters:
        - name: projectId
          in: path
          description: Unique project identifier.
          required: true
          schema:
            type: string
        - name: playgroundItemId
          in: path
          description: Unique playground item identifier.
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateOrUpdatePlaygroundItemRequest"
            example:
              documentId: 0d25d758-d475-4c14-aafa-eb5d6a40b670
              result:
                orderId: "Example: o-89123"
                customerId: "Example: c-20485"
                orderDate: 2024-03-10T11:15:00.000Z
                status: shipped
                totalAmount: 149.99
                currency: USD
                items:
                  - productId: p-00876
                    quantity: 1
                    unitPrice: 79.99
                  - productId: p-00321
                    quantity: 2
                    unitPrice: 35
                shippingAddress:
                  street: 782 Pine St
                  city: Austin
                  state: TX
                  country: USA
                  zip: "73301"
                comments: Leave package at the front door.
                deliveryPreferences:
                  - no_signature_required
                  - standard_delivery
                estimatedDelivery: 2024-03-15T17:00:00.000Z
              totalTokens: 567
              completionTokens: 267
              promptTokens: 300
        required: true
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PlaygroundItemResponse"
              example:
                id: 0c6a5b79-55e4-4be7-af9b-ef46e3f3640c
                projectId: fbeb32ab-025b-4155-817a-f540d0476f32
                ownerUser: 2c79d9f1-8587-4c90-ad0a-f0c489a48ad3
                documentInfo:
                  type: text
                  documentId: 0d25d758-d475-4c14-aafa-eb5d6a40b670
                  fileId: a1097252-ef1e-48e1-af0e-cd3e199a40f7
                  fileName: dummy_confirmation_email.txt
                  text: '[EXAMPLE ONLY] Your order (ID: o-89123) has been successfully processed.
                    The customer ID for this order is c-20485. It was placed on
                    March 10, 2024, at 11:15 AM UTC and is now marked as
                    shipped. The total amount charged is $149.99 USD. The items
                    in this order include: Product ID p-00876 with a quantity of
                    1 at a unit price of $79.99, and Product ID p-00321 with a
                    quantity of 2 at a unit price of $35.00. The shipping
                    address is 782 Pine St, Austin, TX, 73301, USA. The customer
                    has requested: "Leave package at the front door." Additional
                    delivery preferences include no signature required and
                    standard delivery. The estimated delivery date is March 15,
                    2024, by 5:00 PM UTC.'
                  possibleTransformations: []
                result:
                  type: information
                  information:
                    orderId: "Example: o-89123"
                    customerId: "Example: c-20485"
                    orderDate: 2024-03-10T11:15:00.000Z
                    status: shipped
                    totalAmount: 149.99
                    currency: USD
                    items:
                      - productId: p-00876
                        quantity: 1
                        unitPrice: 79.99
                      - productId: p-00321
                        quantity: 2
                        unitPrice: 35
                    shippingAddress:
                      street: 782 Pine St
                      city: Austin
                      state: TX
                      country: USA
                      zip: "73301"
                    comments: Leave package at the front door.
                    deliveryPreferences:
                      - no_signature_required
                      - standard_delivery
                    estimatedDelivery: 2024-03-15T17:00:00.000Z
                createdAt: 2024-01-22T16:45:00Z
                updatedAt: 2024-01-22T16:45:00Z
                totalTokens: 567
                completionTokens: 267
                promptTokens: 300
        "400":
          description: "Invalid value for: body"
          content:
            text/plain:
              schema:
                type: string
        default:
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      security:
        - oauth2Auth:
            - openid
            - profile
            - email
    delete:
      tags:
        - Playground
      description: "

        Delete a specific **Playground Item**.


        #### Error Responses:

        `404 Not Found` - If a **Playground Item** with the specified
        `playgroundItemId` associated with the given `projectId` does not exist.


        `403 Forbidden` - If the user does not have permission to update this
        **Project**.

        \  "
      operationId: deleteApiProjectsProjectidPlaygroundPlaygrounditemid
      parameters:
        - name: projectId
          in: path
          description: Unique project identifier.
          required: true
          schema:
            type: string
        - name: playgroundItemId
          in: path
          description: Unique playground item identifier.
          required: true
          schema:
            type: string
      responses:
        "200":
          description: ""
        default:
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      security:
        - oauth2Auth:
            - openid
            - profile
            - email
  /api/organizations:
    get:
      tags:
        - Organizations
      description: >
        
        Returns the organizations for the current user. Calling this method with
        an api key will result in a 403 (forbidden) error.
      operationId: getApiOrganizations
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/OrganizationResponse"
              example:
                - id: 154f97c7-e49b-4780-8274-399fcee48e7f
                  name: example organization
        default:
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      security:
        - oauth2Auth:
            - openid
            - profile
            - email
    post:
      tags:
        - Organizations
      description: >
        
        Creates an organization with the current user as member.

        The name does not need to be unique. Calling this method with an api key
        will result in a 403 (forbidden) error.


        #### Response:
         Returns a JSON representing the created organization.
      operationId: postApiOrganizations
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateOrganizationRequest"
            example:
              name: example organization
        required: true
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OrganizationResponse"
              example:
                id: 154f97c7-e49b-4780-8274-399fcee48e7f
                name: example organization
        "400":
          description: "Invalid value for: body"
          content:
            text/plain:
              schema:
                type: string
        default:
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      security:
        - oauth2Auth:
            - openid
            - profile
            - email
  /api/organizations/{organizationId}:
    put:
      tags:
        - Organizations
      description: >
        
        Update a specific organization. Calling this method with an api key will
        result in a 403 (forbidden) error.


        #### Error Responses:

        `404 Not Found` - If an organization with the specified id does not
        exist.


        `403 Forbidden` - If the user does not have permission to change this
        organization
      operationId: putApiOrganizationsOrganizationid
      parameters:
        - name: organizationId
          in: path
          description: identifier for the organization
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateOrganizationRequest"
            example:
              name: new name
        required: true
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OrganizationResponse"
              example:
                id: 154f97c7-e49b-4780-8274-399fcee48e7f
                name: example organization
        "400":
          description: "Invalid value for: body"
          content:
            text/plain:
              schema:
                type: string
        default:
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      security:
        - oauth2Auth:
            - openid
            - profile
            - email
    delete:
      tags:
        - Organizations
      description: >
        
        Delete a specific organization, and all its associated objects. Calling
        this method with an api key will result in a 403 (forbidden) error.


        #### Error Responses:

        `404 Not Found` - If an organization with the specified id does not
        exist.


        `403 Forbidden` - If the user does not have permission to delete this
        organization
      operationId: deleteApiOrganizationsOrganizationid
      parameters:
        - name: organizationId
          in: path
          description: identifier for the organization
          required: true
          schema:
            type: string
      responses:
        "200":
          description: ""
        default:
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      security:
        - oauth2Auth:
            - openid
            - profile
            - email
  /api/organizations/{organizationId}/members:
    get:
      tags:
        - Organizations
      description: >
        
        List the members of an organization. Calling this method with an api key
        will result in a 403 (forbidden) error.


        #### Error Responses:

        `404 Not Found` - If an organization with the specified id does not
        exist.
      operationId: getApiOrganizationsOrganizationidMembers
      parameters:
        - name: organizationId
          in: path
          description: identifier for the organization
          required: true
          schema:
            type: string
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/MemberResponse"
              example:
                - id: 2c79d9f1-8587-4c90-ad0a-f0c489a48ad3
                  displayName: example user
                  email: user@example.com
                  roles:
                    - view-organization
        default:
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      security:
        - oauth2Auth:
            - openid
            - profile
            - email
    post:
      tags:
        - Organizations
      description: >
        
        Invite someone to an organization. Calling this method with an api key
        will result in a 403 (forbidden) error.

        The person to invite does not need to have an account when invited,

        she will be added once the account is activated.



        #### Error Responses:

        `404 Not Found` - If an organization with the specified id does not
        exist.
      operationId: postApiOrganizationsOrganizationidMembers
      parameters:
        - name: organizationId
          in: path
          description: identifier for the organization
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/InviteMemberRequest"
            example:
              email: user@example.com
        required: true
      responses:
        "200":
          description: ""
        "400":
          description: "Invalid value for: body"
          content:
            text/plain:
              schema:
                type: string
        default:
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      security:
        - oauth2Auth:
            - openid
            - profile
            - email
  /api/organizations/{organizationId}/members/{userId}:
    delete:
      tags:
        - Organizations
      description: >
        
        Remove a member from an organization. Calling this method with an api
        key will result in a 403 (forbidden) error.


        #### Error Responses:

        `404 Not Found` - If an organization with the specified id does not
        exist,

        or if the member with the given memberId does not exist.
      operationId: deleteApiOrganizationsOrganizationidMembersUserid
      parameters:
        - name: organizationId
          in: path
          description: identifier for the organization
          required: true
          schema:
            type: string
        - name: userId
          in: path
          description: Unique identifier of the user.
          required: true
          schema:
            type: string
      responses:
        "200":
          description: ""
        default:
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      security:
        - oauth2Auth:
            - openid
            - profile
            - email
  /api/organizations/{organizationId}/members/invitations:
    get:
      tags:
        - Organizations
      description: >
        
        List all the pending invitations for a given organization. Calling this
        method with an api key will result in a 403 (forbidden) error.


        #### Error Responses:

        `404 Not Found` - If an organization with the specified id does not
        exist
      operationId: getApiOrganizationsOrganizationidMembersInvitations
      parameters:
        - name: organizationId
          in: path
          description: identifier for the organization
          required: true
          schema:
            type: string
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/InvitationResponse"
              example:
                - id: 13503364-3724-446c-ac00-79b0a2694ef8
                  email: user@example.com
                  roles:
                    - view-organization
        default:
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      security:
        - oauth2Auth:
            - openid
            - profile
            - email
  /api/organizations/{organizationId}/members/invitations/{invitationId}:
    delete:
      tags:
        - Organizations
      description: >
        
        Delete an invitation. Can be used to then create a new one for the user.
        Calling this method with an api key will result in a 403 (forbidden)
        error.


        #### Error Responses:

        `404 Not Found` - If an organization with the specified id does not
        exist,

        or if the invitationId is not valid
      operationId: deleteApiOrganizationsOrganizationidMembersInvitationsInvitationid
      parameters:
        - name: organizationId
          in: path
          description: identifier for the organization
          required: true
          schema:
            type: string
        - name: invitationId
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: ""
        default:
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      security:
        - oauth2Auth:
            - openid
            - profile
            - email
  /api/billing/subscribe:
    post:
      tags:
        - Billing
      operationId: postApiBillingSubscribe
      parameters:
        - name: organizationId
          in: query
          description: "Optional organization identifier.

            If provided, the request will be associated with this organization.

            Otherwise, the request will be associated with the authenticated
            user.

            \        "
          required: false
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SubscriptionRequest"
            example:
              planId: free_plan
        required: true
      responses:
        "200":
          description: ""
        "400":
          description: "Invalid value for: body"
          content:
            text/plain:
              schema:
                type: string
        default:
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      security:
        - oauth2Auth:
            - openid
            - profile
            - email
  /api/billing/restore-subscription:
    post:
      tags:
        - Billing
      operationId: postApiBillingRestore-subscription
      parameters:
        - name: organizationId
          in: query
          description: "Optional organization identifier.

            If provided, the request will be associated with this organization.

            Otherwise, the request will be associated with the authenticated
            user.

            \        "
          required: false
          schema:
            type: string
      responses:
        "200":
          description: ""
        default:
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      security:
        - oauth2Auth:
            - openid
            - profile
            - email
  /api/billing/connect-to-stripe:
    post:
      tags:
        - Billing
      operationId: postApiBillingConnect-to-stripe
      parameters:
        - name: organizationId
          in: query
          description: "Optional organization identifier.

            If provided, the request will be associated with this organization.

            Otherwise, the request will be associated with the authenticated
            user.

            \        "
          required: false
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/StripeSubscriptionRequest"
            example:
              redirectURL: https://example.com
        required: true
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/StripeSubscriptionResponse"
              example:
                url: https://example.com
        "400":
          description: "Invalid value for: body"
          content:
            text/plain:
              schema:
                type: string
        default:
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      security:
        - oauth2Auth:
            - openid
            - profile
            - email
  /api/billing/stripe-portal:
    post:
      tags:
        - Billing
      operationId: postApiBillingStripe-portal
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/StripePortalRequest"
            example:
              organizationId: 154f97c7-e49b-4780-8274-399fcee48e7f
              returnUrl: https://example.com
        required: true
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/StripePortalResponse"
              example:
                url: https://example.com
        "400":
          description: "Invalid value for: body"
          content:
            text/plain:
              schema:
                type: string
        default:
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      security:
        - oauth2Auth:
            - openid
            - profile
            - email
  /api/billing/plans:
    get:
      tags:
        - Billing
      operationId: getApiBillingPlans
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Plan"
              example:
                - key: free_plan
                  name: free plan
                  description: Plan with a free tier
                  version: 1
        default:
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      security:
        - oauth2Auth:
            - openid
            - profile
            - email
  /api/billing/plans/{planKey}:
    get:
      tags:
        - Billing
      operationId: getApiBillingPlansPlankey
      parameters:
        - name: planKey
          in: path
          description: Plan identifier
          required: true
          schema:
            type: string
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Plan"
              example:
                key: free_plan
                name: free plan
                description: Plan with a free tier
                version: 1
        default:
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      security:
        - oauth2Auth:
            - openid
            - profile
            - email
  /api/billing/profile:
    get:
      tags:
        - Billing
      operationId: getApiBillingProfile
      parameters:
        - name: organizationId
          in: query
          required: false
          schema:
            type: string
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BillingProfileResponse"
              example:
                type: ai.numind.extract.shared.ActiveProfileResponse
                planId: free_plan
                currentBillingPeriod:
                  from: 2024-01-22T16:45:00Z
                  to: 2024-02-22T16:45:00Z
                inputFeatureCard:
                  usage: 400
                  freeTokens: 200
                  price: 0.01
                outputFeatureCard:
                  usage: 200
                  freeTokens: 100
                  price: 0.02
                paymentConnected: true
        default:
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      security:
        - oauth2Auth:
            - openid
            - profile
            - email
  /api/auth:
    get:
      tags:
        - Authentication
      operationId: getApiAuth
      parameters:
        - name: redirectUri
          in: query
          required: true
          schema:
            type: string
      responses:
        "200":
          description: ""
          content:
            text/plain:
              schema:
                type: string
        "400":
          description: "Invalid value for: query parameter redirectUri"
          content:
            text/plain:
              schema:
                type: string
        default:
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /api/auth/me:
    get:
      tags:
        - Authentication
      operationId: getApiAuthMe
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        default:
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      security:
        - oauth2Auth:
            - openid
            - profile
            - email
  /api/auth/token:
    post:
      tags:
        - Authentication
      operationId: postApiAuthToken
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/TokenRequest"
            examples:
              Example0:
                value:
                  type: ai.numind.extract.shared.TokenCodeRequest
                  code: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SbXT6e7R0N1hVeJHtTh2uFd7y8Rg-Vu0oiL4T1jbAY0
                  redirectUri: http://localhost:5173
              Example1:
                value:
                  type: ai.numind.extract.shared.TokenRefreshRequest
                  token: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SbXT6e7R0N1hVeJHtTh2uFd7y8Rg-Vu0oiL4T1jbAY0
        required: true
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TokenResponse"
        "400":
          description: "Invalid value for: body"
          content:
            text/plain:
              schema:
                type: string
        default:
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /api/auth/logout:
    post:
      tags:
        - Authentication
      operationId: postApiAuthLogout
      requestBody:
        content:
          application/json:
            schema:
              type: string
        required: true
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                type: object
        "400":
          description: "Invalid value for: body"
          content:
            text/plain:
              schema:
                type: string
        default:
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      security:
        - oauth2Auth:
            - openid
            - profile
            - email
  /api/auth/api-keys:
    get:
      tags:
        - Authentication
      operationId: getApiAuthApi-keys
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ApiKeyResponse"
        default:
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      security:
        - oauth2Auth:
            - openid
            - profile
            - email
    post:
      tags:
        - Authentication
      operationId: postApiAuthApi-keys
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateApiKey"
        required: true
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiKeyResponse"
        "400":
          description: "Invalid value for: body"
          content:
            text/plain:
              schema:
                type: string
        default:
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      security:
        - oauth2Auth:
            - openid
            - profile
            - email
  /api/auth/api-keys/{apiKeyId}:
    put:
      tags:
        - Authentication
      operationId: putApiAuthApi-keysApikeyid
      parameters:
        - name: apiKeyId
          in: path
          description: Unique api key identifier.
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateApiKey"
        required: true
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiKeyResponse"
        "400":
          description: "Invalid value for: body"
          content:
            text/plain:
              schema:
                type: string
        default:
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      security:
        - oauth2Auth:
            - openid
            - profile
            - email
    delete:
      tags:
        - Authentication
      operationId: deleteApiAuthApi-keysApikeyid
      parameters:
        - name: apiKeyId
          in: path
          description: Unique api key identifier.
          required: true
          schema:
            type: string
      responses:
        "200":
          description: ""
        default:
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      security:
        - oauth2Auth:
            - openid
            - profile
            - email
  /api/auth/account:
    delete:
      tags:
        - Authentication
      description: |
        
        Deletes the current user account and all its associated objects.
      operationId: deleteApiAuthAccount
      responses:
        "200":
          description: ""
        default:
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      security:
        - oauth2Auth:
            - openid
            - profile
            - email
  /api/jobs:
    get:
      tags:
        - Jobs
      description: List all jobs for the authenticated user
      operationId: getApiJobs
      parameters:
        - name: organization
          in: query
          required: false
          schema:
            type: string
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/JobResponse"
              example:
                - id: 550e8400-e29b-41d4-a716-446655440000
                  jobType: inference
                  status: completed
                  ownerUser: 2c79d9f1-8587-4c90-ad0a-f0c489a48ad3
                  inputData: '{"projectId":"${projectId}","documentId":"${docIdText}"}'
                  outputData: |-
                    {
                    "orderId": "Example: o-89123",
                    "customerId": "Example: c-20485",
                    "orderDate": "2024-03-10T11:15:00.000Z",
                    "status": "shipped",
                    "totalAmount": 149.99,
                    "currency": "USD",
                    "items": [
                    {
                    "productId": "p-00876",
                    "quantity": 1,
                    "unitPrice": 79.99
                    },
                    {
                    "productId": "p-00321",
                    "quantity": 2,
                    "unitPrice": 35
                    }
                    ],
                    "shippingAddress": {
                    "street": "782 Pine St",
                    "city": "Austin",
                    "state": "TX",
                    "country": "USA",
                    "zip": "73301"
                    },
                    "comments": "Leave package at the front door.",
                    "deliveryPreferences": [
                    "no_signature_required",
                    "standard_delivery"
                    ],
                    "estimatedDelivery": "2024-03-15T17:00:00.000Z"
                    }
                  startedAt: 2024-01-22T16:45:00Z
                  completedAt: 2024-01-22T16:45:00Z
                  createdAt: 2024-01-22T16:45:00Z
                  updatedAt: 2024-01-22T16:45:00Z
                - id: 550e8400-e29b-41d4-a716-446655440000
                  jobType: inference
                  status: running
                  ownerUser: 2c79d9f1-8587-4c90-ad0a-f0c489a48ad3
                  inputData: '{"projectId":"${projectId}","temperature":0.3,"dpi":150}'
                  startedAt: 2024-01-22T16:45:00Z
                  createdAt: 2024-01-22T16:45:00Z
                  updatedAt: 2024-01-22T16:45:00Z
        default:
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      security:
        - oauth2Auth:
            - openid
            - profile
            - email
  /api/jobs/{jobId}:
    get:
      tags:
        - Jobs
      description: Get details of a specific job
      operationId: getApiJobsJobid
      parameters:
        - name: jobId
          in: path
          description: Unique job identifier.
          required: true
          schema:
            type: string
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/JobResponse"
              example:
                id: 550e8400-e29b-41d4-a716-446655440000
                jobType: inference
                status: completed
                ownerUser: 2c79d9f1-8587-4c90-ad0a-f0c489a48ad3
                inputData: '{"projectId":"${projectId}","documentId":"${docIdText}"}'
                outputData: |-
                  {
                  "orderId": "Example: o-89123",
                  "customerId": "Example: c-20485",
                  "orderDate": "2024-03-10T11:15:00.000Z",
                  "status": "shipped",
                  "totalAmount": 149.99,
                  "currency": "USD",
                  "items": [
                  {
                  "productId": "p-00876",
                  "quantity": 1,
                  "unitPrice": 79.99
                  },
                  {
                  "productId": "p-00321",
                  "quantity": 2,
                  "unitPrice": 35
                  }
                  ],
                  "shippingAddress": {
                  "street": "782 Pine St",
                  "city": "Austin",
                  "state": "TX",
                  "country": "USA",
                  "zip": "73301"
                  },
                  "comments": "Leave package at the front door.",
                  "deliveryPreferences": [
                  "no_signature_required",
                  "standard_delivery"
                  ],
                  "estimatedDelivery": "2024-03-15T17:00:00.000Z"
                  }
                startedAt: 2024-01-22T16:45:00Z
                completedAt: 2024-01-22T16:45:00Z
                createdAt: 2024-01-22T16:45:00Z
                updatedAt: 2024-01-22T16:45:00Z
        default:
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      security:
        - oauth2Auth:
            - openid
            - profile
            - email
  /api/jobs/{jobId}/stream:
    get:
      tags:
        - Jobs
      description: Stream job result via Server-Sent Events
      operationId: getApiJobsJobidStream
      parameters:
        - name: jobId
          in: path
          description: Unique job identifier.
          required: true
          schema:
            type: string
      responses:
        "200":
          description: ""
          content:
            text/event-stream:
              schema:
                type: string
        default:
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      security:
        - oauth2Auth:
            - openid
            - profile
            - email
  /api/ping:
    get:
      operationId: getApiPing
      responses:
        "200":
          description: ""
          content:
            text/plain:
              schema:
                type: string
        default:
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /api/health:
    get:
      operationId: getApiHealth
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/HealthResponse"
        default:
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /api/version:
    get:
      operationId: getApiVersion
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/VersionResponse"
        default:
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /api/debug/status/{code}:
    get:
      description: Simulate HTTP status code and latency for debugging. Requires
        X-Internal-Debug header.
      operationId: getApiDebugStatusCode
      parameters:
        - name: code
          in: path
          description: HTTP status code to return
          required: true
          schema:
            type: integer
            format: int32
        - name: delayMs
          in: query
          description: Optional delay in ms before responding (default 0)
          required: false
          schema:
            type: integer
            format: int32
      responses:
        "200":
          description: ""
          headers:
            X-Debug-DelayMs:
              description: Actual delay applied in ms
              required: true
              schema:
                type: integer
                format: int32
        "400":
          description: "Invalid value for: path parameter code, Invalid value for: query
            parameter delayMs"
          content:
            text/plain:
              schema:
                type: string
        default:
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
components:
  schemas:
    ActiveProfileResponse:
      title: ActiveProfileResponse
      type: object
      required:
        - planId
        - inputFeatureCard
        - outputFeatureCard
        - paymentConnected
        - type
      properties:
        planId:
          type: string
        currentBillingPeriod:
          $ref: "#/components/schemas/BillingPeriod"
        inputFeatureCard:
          $ref: "#/components/schemas/FeatureCardResponse"
        outputFeatureCard:
          $ref: "#/components/schemas/FeatureCardResponse"
        paymentConnected:
          type: boolean
        type:
          type: string
          const: ai.numind.extract.shared.ActiveProfileResponse
    ApiKeyResponse:
      title: ApiKeyResponse
      type: object
      required:
        - id
        - name
        - token
        - userId
        - createdAt
        - expiresAt
      properties:
        id:
          type: string
        organization:
          type: string
        name:
          type: string
        token:
          type: string
        userId:
          type: string
        createdAt:
          type: string
        expiresAt:
          type: string
    Arr:
      title: Arr
      type: object
      properties:
        values:
          type: array
          items:
            $ref: "#/components/schemas/InfoNode"
    Arr1:
      title: Arr
      type: object
      required:
        - schema
      properties:
        schema:
          $ref: "#/components/schemas/SchemaNode"
    BillingPeriod:
      title: BillingPeriod
      type: object
      required:
        - from
        - to
      properties:
        from:
          type: string
        to:
          type: string
    BillingProfileResponse:
      title: BillingProfileResponse
      oneOf:
        - $ref: "#/components/schemas/ActiveProfileResponse"
        - $ref: "#/components/schemas/InactiveProfileResponse"
      discriminator:
        propertyName: type
        mapping:
          ai.numind.extract.shared.ActiveProfileResponse: "#/components/schemas/ActiveProfileResponse"
          ai.numind.extract.shared.InactiveProfileResponse: "#/components/schemas/InactiveProfileResponse"
    Bool:
      title: Bool
      type: object
      required:
        - value
      properties:
        value:
          type: boolean
    Bool1:
      title: Bool
      type: object
    ConvertRequest:
      title: ConvertRequest
      type: object
      required:
        - rasterizationDPI
      properties:
        rasterizationDPI:
          description: >-
            Resolution used to convert formatted documents (PDFs, etc.) to
            images, in dot per inch.  

            Ranges between 1 and 300.
          type: integer
          format: int32
          exclusiveMinimum: 0
          maximum: 300
    CreateApiKey:
      title: CreateApiKey
      type: object
      required:
        - name
      properties:
        maybeOrga:
          type: string
        name:
          type: string
    CreateOrUpdateExampleRequest:
      title: CreateOrUpdateExampleRequest
      type: object
      required:
        - documentId
        - result
      properties:
        documentId:
          description: Unique document identifier.
          type: string
        result:
          $ref: "#/components/schemas/Obj"
          description: Expected inference result.
    CreateOrUpdatePlaygroundItemRequest:
      title: CreateOrUpdatePlaygroundItemRequest
      type: object
      required:
        - documentId
        - result
      properties:
        ownerOrganization:
          description: Project owning organization (optional).
          type: string
        documentId:
          description: Unique document identifier.
          type: string
        result:
          $ref: "#/components/schemas/Obj"
          description: Inference result.
        totalTokens:
          description: Total number of tokens used for inference (input + output).
          type: integer
          format: int64
        completionTokens:
          description: Completion tokens used for extraction (output).
          type: integer
          format: int64
        promptTokens:
          description: Prompt tokens used for extraction (input).
          type: integer
          format: int64
    CreateOrganizationRequest:
      title: CreateOrganizationRequest
      type: object
      required:
        - name
      properties:
        name:
          description: name for this organization
          type: string
    CreateProjectRequest:
      title: CreateProjectRequest
      type: object
      required:
        - name
        - description
        - template
      properties:
        name:
          description: Name of the project.
          type: string
        description:
          description: Text description of the project (can be left empty).
          type: string
        template:
          $ref: "#/components/schemas/Obj1"
          description: Template of the project.
        ownerOrganization:
          description: >-
            Optional organization identifier.  

            When specified, the project will belong to the given organization
            instead of being a personal project.
          type: string
    Datetime:
      title: Datetime
      type: object
    DocumentInfo:
      title: DocumentInfo
      oneOf:
        - $ref: "#/components/schemas/ImageInfo"
        - $ref: "#/components/schemas/TextInfo"
      discriminator:
        propertyName: type
        mapping:
          image: "#/components/schemas/ImageInfo"
          text: "#/components/schemas/TextInfo"
    DocumentResponse:
      title: DocumentResponse
      type: object
      required:
        - docInfo
        - ownerUser
        - contentType
        - createdAt
      properties:
        docInfo:
          $ref: "#/components/schemas/DocumentInfo"
          description: Basic document information.
        ownerUser:
          description: Document owner.
          type: string
        ownerOrganization:
          description: Document owning organization (if any).
          type: string
        contentType:
          description: Mime type of the document.
          type: string
        createdAt:
          description: Document creation date.
          type: string
    Enum:
      title: Enum
      type: object
      properties:
        values:
          type: array
          items:
            type: string
    Error:
      title: Error
      type: object
      required:
        - code
        - message
      properties:
        code:
          type: string
        message:
          type: string
    ExampleResponse:
      title: ExampleResponse
      type: object
      required:
        - id
        - projectId
        - ownerUser
        - documentInfo
        - result
        - createdAt
        - updatedAt
      properties:
        id:
          description: Unique example identifier.
          type: string
        projectId:
          description: Unique project identifier.
          type: string
        ownerUser:
          description: Example owner.
          type: string
        documentInfo:
          $ref: "#/components/schemas/DocumentInfo"
          description: Basic information on the document used to create this example.
        result:
          $ref: "#/components/schemas/InformationResponse"
          description: Expected inference result.
        createdAt:
          description: Example creation date.
          type: string
        updatedAt:
          description: Example last update date.
          type: string
    ExtractionResponse:
      title: ExtractionResponse
      type: object
      required:
        - result
        - completionTokens
        - promptTokens
        - totalTokens
        - logprobs
      properties:
        result:
          $ref: "#/components/schemas/Obj"
          description: Extraction result conforming to the template.
        rawResult:
          $ref: "#/components/schemas/RawResult"
          description: Extraction result if not conforming to the template.
        completionTokens:
          description: Completion tokens used for extraction (output).
          type: integer
          format: int64
        promptTokens:
          description: Prompt tokens used for extraction (input).
          type: integer
          format: int64
        totalTokens:
          description: Total number of tokens used for extraction (input + output).
          type: integer
          format: int64
        logprobs:
          description: Logprob of the extraction result (sum of logprobs of all tokens).
          type: number
          format: double
    FeatureCardResponse:
      title: FeatureCardResponse
      type: object
      required:
        - usage
        - freeTokens
        - price
      properties:
        usage:
          type: integer
          format: int64
        freeTokens:
          type: integer
          format: int64
        price:
          type: number
          format: double
    FileResponse:
      title: FileResponse
      type: object
      required:
        - fileId
        - ownerUser
        - contentType
        - createdAt
      properties:
        fileId:
          description: Unique file identifier.
          type: string
        fileName:
          description: Filename of the initial file.
          type: string
        ownerUser:
          description: File owner.
          type: string
        ownerOrganization:
          description: File owning organization (if any).
          type: string
        contentType:
          description: Mime type of the file.
          type: string
        createdAt:
          description: File creation date.
          type: string
    HealthResponse:
      title: HealthResponse
      type: object
      properties:
        services:
          type: array
          items:
            $ref: "#/components/schemas/ServiceStatus"
    ImageInfo:
      title: ImageInfo
      type: object
      required:
        - documentId
        - fileId
        - fileName
        - type
      properties:
        documentId:
          description: Unique document identifier.
          type: string
        fileId:
          description: Unique file identifier of the file used to generate this document.
          type: string
        fileName:
          description: Filename of the initial file.
          type: string
        possibleTransformations:
          description: Possible transformations that can be done with this document.
          type: array
          items:
            type: string
        dpi:
          description: Resolution used to convert formatted documents (PDFs, etc.) to
            images, in dot per inch.
          type: integer
          format: int32
          exclusiveMinimum: 0
          maximum: 300
        type:
          type: string
          const: image
    InactiveProfileResponse:
      title: InactiveProfileResponse
      type: object
      required:
        - type
      properties:
        type:
          type: string
          const: ai.numind.extract.shared.InactiveProfileResponse
    InferenceResponse:
      title: InferenceResponse
      type: object
      required:
        - result
        - documentInfo
        - completionTokens
        - promptTokens
        - totalTokens
        - logprobs
      properties:
        result:
          $ref: "#/components/schemas/Obj"
          description: Inference result conforming to the template.
        rawResult:
          $ref: "#/components/schemas/RawResult"
          description: Inference result if not conforming to the template.
        documentInfo:
          $ref: "#/components/schemas/DocumentInfo"
          description: Basic information on the document used for inference.
        completionTokens:
          description: Completion tokens used for inference (output).
          type: integer
          format: int64
        promptTokens:
          description: Prompt tokens used for inference (input).
          type: integer
          format: int64
        totalTokens:
          description: Total number of tokens used for inference (input + output).
          type: integer
          format: int64
        logprobs:
          description: Logprob of the inference result (sum of logprobs of all tokens).
          type: number
          format: double
    InfoNode:
      title: InfoNode
      oneOf:
        - $ref: "#/components/schemas/Arr"
        - $ref: "#/components/schemas/Bool"
        - $ref: "#/components/schemas/Null"
        - $ref: "#/components/schemas/Num"
        - $ref: "#/components/schemas/Obj"
        - $ref: "#/components/schemas/Str"
    InformationResponse:
      title: InformationResponse
      oneOf:
        - $ref: "#/components/schemas/InvalidInformation"
        - $ref: "#/components/schemas/ValidInformation"
      discriminator:
        propertyName: type
        mapping:
          information: "#/components/schemas/ValidInformation"
          string: "#/components/schemas/InvalidInformation"
    Integer:
      title: Integer
      type: object
    InvalidInformation:
      title: InvalidInformation
      type: object
      required:
        - information
        - error
        - type
      properties:
        information:
          description: |-
            Inference result not conforming to the template.   
               This is the raw response from the model.
          type: string
        error:
          description: Error message explaining why the inference result is invalid.
          type: string
        type:
          type: string
          const: string
    InvalidSchema:
      title: InvalidSchema
      type: object
      required:
        - schema
        - error
        - type
      properties:
        schema:
          type: string
        error:
          type: string
        type:
          type: string
          const: string
    InvitationResponse:
      title: InvitationResponse
      type: object
      required:
        - id
        - email
      properties:
        id:
          description: identifier of this invitation
          type: string
        email:
          description: email of the person invited
          type: string
        roles:
          description: roles associated with this invitation
          type: array
          items:
            type: string
    InviteMemberRequest:
      title: InviteMemberRequest
      type: object
      required:
        - email
      properties:
        email:
          description: email of the user to invite
          type: string
    JobIdResponse:
      title: JobIdResponse
      type: object
      required:
        - jobId
      properties:
        jobId:
          description: Unique job identifier.
          type: string
    JobResponse:
      title: JobResponse
      type: object
      required:
        - id
        - jobType
        - status
        - ownerUser
        - inputData
        - startedAt
        - createdAt
        - updatedAt
      properties:
        id:
          description: Unique job identifier.
          type: string
        jobType:
          description: Job type.
          type: string
        status:
          description: Job status.
          type: string
        ownerUser:
          description: Job owner.
          type: string
        ownerOrganization:
          description: Job owning organization (if any).
          type: string
        inputData:
          description: Job input data.
          type: string
        outputData:
          description: Job output data (if completed).
          type: string
        errorMessage:
          description: Error message (if failed).
          type: string
        startedAt:
          description: Job start time.
          type: string
        completedAt:
          description: Job completion time (if completed).
          type: string
        createdAt:
          description: Job creation date.
          type: string
        updatedAt:
          description: Job last update date.
          type: string
    Map_V:
      title: Map_V
      type: object
      additionalProperties:
        $ref: "#/components/schemas/InfoNode"
    MemberResponse:
      title: MemberResponse
      type: object
      required:
        - id
        - displayName
        - email
      properties:
        id:
          description: identifier of the user
          type: string
        displayName:
          description: name of the user
          type: string
        email:
          description: email of the user
          type: string
        roles:
          description: roles of the user
          type: array
          items:
            type: string
    MultiEnum:
      title: MultiEnum
      type: object
      properties:
        values:
          type: array
          items:
            type: string
    "Null":
      title: "Null"
      type: object
    Num:
      title: Num
      type: object
      required:
        - value
      properties:
        value:
          type: number
          format: double
    Num1:
      title: Num
      type: object
    Obj:
      title: Obj
      type: object
      required:
        - schemas
      properties:
        schemas:
          $ref: "#/components/schemas/Map_V"
    Obj1:
      title: Obj
      type: object
      required:
        - schemas
      properties:
        schemas:
          $ref: "#/components/schemas/Map_V"
    OrganizationResponse:
      title: OrganizationResponse
      type: object
      required:
        - id
        - name
      properties:
        id:
          description: identifier for this organization
          type: string
        name:
          description: name of this organization
          type: string
    Plan:
      title: Plan
      type: object
      required:
        - key
        - name
        - version
      properties:
        key:
          type: string
        name:
          type: string
        description:
          type: string
        version:
          type: integer
          format: int32
    PlaygroundItemResponse:
      title: PlaygroundItemResponse
      type: object
      required:
        - id
        - projectId
        - ownerUser
        - documentInfo
        - result
        - createdAt
        - updatedAt
      properties:
        id:
          description: Unique playground item identifier.
          type: string
        projectId:
          description: Unique project identifier.
          type: string
        ownerUser:
          description: Playground item owner.
          type: string
        documentInfo:
          $ref: "#/components/schemas/DocumentInfo"
          description: Basic information on the document used for inference.
        result:
          $ref: "#/components/schemas/InformationResponse"
          description: Inference result.
        createdAt:
          description: Playground item creation date.
          type: string
        updatedAt:
          description: Playground item last update date.
          type: string
        totalTokens:
          description: Total number of tokens used for inference (input + output).
          type: integer
          format: int64
        completionTokens:
          description: Completion tokens used for inference (output).
          type: integer
          format: int64
        promptTokens:
          description: Prompt tokens used for inference (input).
          type: integer
          format: int64
    ProjectResponse:
      title: ProjectResponse
      type: object
      required:
        - id
        - name
        - description
        - template
        - ownerUser
        - createdAt
        - updatedAt
        - lockState
        - shared
        - settings
      properties:
        id:
          description: Unique project identifier.
          type: string
        name:
          description: Project name.
          type: string
        description:
          description: A brief explanation of the project.
          type: string
        template:
          $ref: "#/components/schemas/SchemaResponse"
        ownerUser:
          description: Project owner.
          type: string
        ownerOrganization:
          description: Project owning organization (if any).
          type: string
        createdAt:
          description: Project creation date.
          type: string
        updatedAt:
          description: Project last update date.
          type: string
        lockState:
          description: The lock state of the project.
          type: boolean
        shared:
          description: The shared (reference) state of the project.
          type: boolean
        settings:
          $ref: "#/components/schemas/ProjectSettingsResponse"
    ProjectSettingsResponse:
      title: ProjectSettingsResponse
      description: Project settings.
      type: object
      required:
        - temperature
        - rasterizationDPI
        - maxOutputTokens
        - degradedMode
        - maxTokensSmartExample
      properties:
        temperature:
          description: Model temperature.
          type: number
          format: double
          minimum: 0
          maximum: 1
        rasterizationDPI:
          description: Resolution used to convert formatted documents to images.
          type: integer
          format: int32
          exclusiveMinimum: 0
          maximum: 300
        maxOutputTokens:
          description: Maximum number of output tokens (optional). Must be positive. Set
            to 0 for no limit.
          type: integer
          format: int64
        degradedMode:
          description: Controls whether a response is returned when smart example is not
            functionning. Rejects by default.
          type: string
        maxTokensSmartExample:
          description: Maximum number of output tokens for smart examples (optional). Must
            be positive.
          type: integer
          format: int32
          minimum: 0
          maximum: 32000
    RawResult:
      title: RawResult
      type: object
      required:
        - result
        - error
      properties:
        result:
          description: Inference result not conforming to the template.
          type: string
        error:
          description: Error message explaining why the inference result is invalid.
          type: string
    SchemaNode:
      title: SchemaNode
      oneOf:
        - $ref: "#/components/schemas/Arr1"
        - $ref: "#/components/schemas/Bool1"
        - $ref: "#/components/schemas/Datetime"
        - $ref: "#/components/schemas/Enum"
        - $ref: "#/components/schemas/Integer"
        - $ref: "#/components/schemas/MultiEnum"
        - $ref: "#/components/schemas/Num1"
        - $ref: "#/components/schemas/Obj1"
        - $ref: "#/components/schemas/Str1"
        - $ref: "#/components/schemas/VerbatimStr"
    SchemaResponse:
      title: SchemaResponse
      description: Extraction template (NuExtract format).
      oneOf:
        - $ref: "#/components/schemas/InvalidSchema"
        - $ref: "#/components/schemas/ValidSchema"
      discriminator:
        propertyName: type
        mapping:
          schema: "#/components/schemas/ValidSchema"
          string: "#/components/schemas/InvalidSchema"
    ServiceStatus:
      title: ServiceStatus
      type: object
      required:
        - name
        - status
      properties:
        name:
          type: string
        status:
          type: string
        count:
          type: integer
          format: int32
    Str:
      title: Str
      type: object
      required:
        - value
      properties:
        value:
          type: string
    Str1:
      title: Str
      type: object
    StripePortalRequest:
      title: StripePortalRequest
      type: object
      required:
        - returnUrl
      properties:
        organizationId:
          type: string
        returnUrl:
          type: string
    StripePortalResponse:
      title: StripePortalResponse
      type: object
      required:
        - url
      properties:
        url:
          type: string
    StripeSubscriptionRequest:
      title: StripeSubscriptionRequest
      type: object
      required:
        - redirectURL
      properties:
        redirectURL:
          type: string
    StripeSubscriptionResponse:
      title: StripeSubscriptionResponse
      type: object
      required:
        - url
      properties:
        url:
          type: string
    SubscriptionRequest:
      title: SubscriptionRequest
      type: object
      required:
        - planId
      properties:
        planId:
          type: string
    TemplateRequest:
      title: TemplateRequest
      type: object
      required:
        - description
      properties:
        description:
          description: Free-format template description.
          type: string
    TextInfo:
      title: TextInfo
      type: object
      required:
        - documentId
        - fileId
        - text
        - type
      properties:
        documentId:
          description: Unique document identifier.
          type: string
        fileId:
          description: Unique file identifier of the file used to generate this document.
          type: string
        fileName:
          description: |-
            Filename of the initial file if any.  
              **None** for text input.
          type: string
        text:
          description: The text content of the document.
          type: string
        possibleTransformations:
          description: Possible transformations that can be done with this document.
          type: array
          items:
            type: string
        type:
          type: string
          const: text
    TextRequest:
      title: TextRequest
      type: object
      required:
        - text
      properties:
        text:
          description: The text to extract from.
          type: string
    TokenCodeRequest:
      title: TokenCodeRequest
      type: object
      required:
        - code
        - redirectUri
        - type
      properties:
        code:
          type: string
        redirectUri:
          type: string
        type:
          type: string
          const: ai.numind.extract.shared.TokenCodeRequest
    TokenRefreshRequest:
      title: TokenRefreshRequest
      type: object
      required:
        - token
        - type
      properties:
        token:
          type: string
        type:
          type: string
          const: ai.numind.extract.shared.TokenRefreshRequest
    TokenRequest:
      title: TokenRequest
      oneOf:
        - $ref: "#/components/schemas/TokenCodeRequest"
        - $ref: "#/components/schemas/TokenRefreshRequest"
      discriminator:
        propertyName: type
        mapping:
          ai.numind.extract.shared.TokenCodeRequest: "#/components/schemas/TokenCodeRequest"
          ai.numind.extract.shared.TokenRefreshRequest: "#/components/schemas/TokenRefreshRequest"
    TokenResponse:
      title: TokenResponse
      type: object
      required:
        - token
        - expiresIn
      properties:
        token:
          type: string
        expiresIn:
          type: integer
          format: int32
        refreshToken:
          type: string
        refreshExpiresIn:
          type: integer
          format: int32
    UpdateApiKey:
      title: UpdateApiKey
      type: object
      required:
        - name
      properties:
        name:
          type: string
    UpdateOrganizationRequest:
      title: UpdateOrganizationRequest
      type: object
      required:
        - name
      properties:
        name:
          description: new name for this organization
          type: string
    UpdateProjectRequest:
      title: UpdateProjectRequest
      type: object
      properties:
        name:
          description: Project name (optional).
          type: string
        description:
          description: A brief explanation of the project (optional).
          type: string
        template:
          $ref: "#/components/schemas/Obj1"
          description: Extraction template (NuExtract format) (optional).
    UpdateProjectSettingsRequest:
      title: UpdateProjectSettingsRequest
      type: object
      properties:
        temperature:
          description: Model temperature (optional).
          type: number
          format: double
          minimum: 0
          maximum: 1
        rasterizationDPI:
          description: Resolution used to convert formatted documents to images (optional).
          type: integer
          format: int32
          exclusiveMinimum: 0
          maximum: 300
        maxOutputTokens:
          description: Maximum number of output tokens (optional). Must be positive. Set
            to 0 for no limit.
          type: integer
          format: int64
        degradedMode:
          description: Controls whether a response is returned when smart example is not
            functionning. Rejects by default.
          type: string
        maxTokensSmartExample:
          description: Maximum number of output tokens for smart examples (optional). Must
            be positive.
          type: integer
          format: int32
          minimum: 0
          maximum: 32000
    UpdateProjectTemplateRequest:
      title: UpdateProjectTemplateRequest
      type: object
      required:
        - template
      properties:
        template:
          $ref: "#/components/schemas/Obj1"
          description: Extraction template (NuExtract format).
    User:
      title: User
      type: object
      required:
        - email
        - isAdmin
      properties:
        email:
          type: string
        isAdmin:
          type: boolean
        organizations:
          type: array
          items:
            $ref: "#/components/schemas/OrganizationResponse"
    ValidInformation:
      title: ValidInformation
      type: object
      required:
        - information
        - type
      properties:
        information:
          $ref: "#/components/schemas/Obj"
          description: Inference result conforming to the template.
        type:
          type: string
          const: information
    ValidSchema:
      title: ValidSchema
      type: object
      required:
        - schema
        - type
      properties:
        schema:
          $ref: "#/components/schemas/Obj1"
        type:
          type: string
          const: schema
    VerbatimStr:
      title: VerbatimStr
      type: object
    VersionResponse:
      title: VersionResponse
      type: object
      required:
        - name
        - buildVersion
        - buildBranch
        - buildTime
      properties:
        name:
          type: string
        buildVersion:
          type: string
        buildBranch:
          type: string
        buildTime:
          type: string
  securitySchemes:
    oauth2Auth:
      type: oauth2
      flows:
        authorizationCode:
          authorizationUrl: https://users.numind.ai/realms/extract-platform/protocol/openid-connect/auth
          tokenUrl: https://users.numind.ai/realms/extract-platform/protocol/openid-connect/token
          refreshUrl: https://users.numind.ai/realms/extract-platform/protocol/openid-connect/token
          scopes:
            openid: OpenID connect
            profile: view profile
            email: view email
