---
description: "Sp√©cification g√©n√©rale du module hermes2022-extraction-files"
alwaysApply: true
---

# specification-hermes2022-extraction-files.mdc: Sp√©cification g√©n√©rale du module hermes2022-extraction-files

Chemin : hermes2022-to-archimate/shared/hermes2022-extraction-files/.cursor/rules/

> Cr√©√© le : 2025-08-16  
> Derni√®re mise √† jour : 2025-08-18

## Description g√©n√©rale

- Le module hermes2022-extraction-files est un module partag√© qui centralise la gestion des fichiers interm√©diaires produits par l'extraction des concepts HERMES2022
- Il fournit la structure, les sch√©mas de validation et les donn√©es partag√©es entre les modules d'extraction, de chargement Archimate et de chargement Neo4j
- Il assure la coh√©rence et la validit√© des donn√©es √©chang√©es entre les diff√©rents modules du projet

## Contexte

- Sp√©cification amont @.cursor/rules/specification-hermes2022-to-archimate.mdc
- Module consomm√© par hermes2022-concepts-site-extraction, archimate-model-loader et hermes2022-ia-loader
- Interface de donn√©es standardis√©e pour l'ensemble du projet

## Objectifs

- Centraliser la d√©finition des structures de donn√©es interm√©diaires pour les concepts HERMES2022
- Assurer la validation et la coh√©rence des donn√©es √©chang√©es entre modules
- Fournir un r√©f√©rentiel unique et maintenable pour les sch√©mas de donn√©es
- Faciliter la tra√ßabilit√© et l'historisation des extractions

## Conception g√©n√©rale

- Architecture modulaire avec s√©paration claire des responsabilit√©s
- Interface standardis√©e bas√©e sur JSON Schema pour la validation
- Gestion d'archive pour conserver l'historique des extractions
- Structure extensible pour supporter l'√©volution des besoins

## Structure de r√©pertoire

| √âl√©ment | Type | Description |
|:--------|:-----|:------------|
| `/.cursor/rules/` | R√©pertoire | Sp√©cifications selon la gouvernance des r√®gles |
| `/config/json-schemas/` | R√©pertoire | Sch√©mas JSON Schema pour validation des fichiers interm√©diaires |
| `/data/` | R√©pertoire | Fichiers de donn√©es courantes et actives |
| `/data/archive/` | R√©pertoire | Historique des extractions pass√©es conserv√©es |

## D√©cisions architecturales et techniques

### Structure modulaire des fichiers interm√©diaires

#### Description d√©taill√©e pour la structure modulaire

- [2025-08-16] Les fichiers interm√©diaires sont organis√©s selon une structure modulaire respectant le principe de s√©gr√©gation des domaines
- [2025-08-16] **IMPL√âMENTATION ACTUELLE** : Seules les phases HERMES2022 sont impl√©ment√©es, les autres concepts (sc√©narios, modules, t√¢ches, r√©sultats, r√¥les) seront ajout√©s progressivement
- [2025-08-16] La structure est con√ßue pour faciliter la maintenance et l'√©volution ind√©pendante de chaque concept
- [2025-08-16] **APPROCHE PAR LANGUE** : Un fichier interm√©diaire par langue d'extraction pour √©viter les complexit√©s de gestion multilingue simultan√©e

#### Justification pour la structure modulaire

- **Maintenabilit√©** : √âvolution ind√©pendante de chaque concept sans impact sur les autres
- **Lisibilit√©** : Organisation claire facilitant la compr√©hension et la maintenance
- **Extensibilit√©** : Ajout facile de nouveaux concepts sans modification de l'architecture existante
- **Coh√©rence** : Respect du principe de s√©gr√©gation des domaines
- **Simplicit√© linguistique** : √âvite les complexit√©s de gestion multilingue simultan√©e

#### Patterns valid√©s pour la structure modulaire

- **Un sch√©ma par concept** : `/config/json-schemas/{concept}-schema.json` pour chaque concept HERMES2022
- **Sch√©ma principal** : `hermes2022-concepts.json` qui r√©f√©rence tous les concepts impl√©ment√©s
- **Fichiers par langue** : `hermes2022-concepts-{langue}.json` pour chaque langue d'extraction
- **Archive structur√©e** : `/data/archive/{YYYY-MM-DD}/` pour l'historique

#### Anti-Patterns pour la structure modulaire √† √©viter

- **Sch√©ma monolithique** : √âviter un seul fichier schema complexe ‚Üí **Solution** : Modularit√© par concept ‚Üí **R√®gle √† adopter** : Un sch√©ma par domaine pour faciliter la maintenance
- **M√©lange des responsabilit√©s** : √âviter de m√©langer sp√©cifications, sch√©mas et donn√©es ‚Üí **Solution** : S√©paration par r√©pertoires ‚Üí **R√®gle √† adopter** : Structure modulaire avec responsabilit√©s distinctes
- **Gestion multilingue simultan√©e** : √âviter les fichiers complexes avec plusieurs langues ‚Üí **Solution** : Un fichier par langue ‚Üí **R√®gle √† adopter** : S√©paration linguistique claire

#### √âtat d'impl√©mentation pour la structure modulaire

üöß [En cours de conception et r√©alisation]

- ‚úÖ **Phases HERMES2022** : Sch√©ma complet impl√©ment√©
- ‚ùå **Autres concepts** : √Ä impl√©menter progressivement selon les besoins

### Format et validation des fichiers interm√©diaires

#### Description d√©taill√©e pour le format et validation

- [2025-08-16] Les fichiers interm√©diaires utilisent le format JSON avec validation JSON Schema Draft 7
- [2025-08-16] **IMPL√âMENTATION ACTUELLE** : Seul le sch√©ma des phases est compl√®tement d√©fini
- [2025-08-16] La validation est automatique et syst√©matique avant toute consommation par les modules avals
- [2025-08-16] **IDENTIFIANTS INTERNES** : Cr√©ation d'identifiants al√©atoires uniques (format `ph_abc123`) pour √©viter la d√©pendance aux noms multilingues

#### Justification pour le format et validation

- **Format JSON** : Lisibilit√© humaine et machine, interop√©rabilit√© universelle
- **JSON Schema** : Validation structurelle automatis√©e, documentation int√©gr√©e
- **Validation syst√©matique** : Garantie de la qualit√© et de la coh√©rence des donn√©es
- **Tra√ßabilit√©** : Contr√¥le automatis√© des donn√©es √©chang√©es
- **Identifiants internes** : Ind√©pendance linguistique et unicit√© garantie

#### Patterns valid√©s pour le format et validation

- **Validation automatique** : Contr√¥les de coh√©rence avant consommation
- **Sch√©mas auto-document√©s** : Documentation int√©gr√©e dans les sch√©mas
- **Gestion d'erreurs** : Traitement syst√©matique des donn√©es invalides
- **Logs de validation** : Tra√ßabilit√© des validations effectu√©es
- **Identifiants al√©atoires** : Format `ph_abc123` pour l'unicit√© et l'ind√©pendance linguistique

#### Anti-Patterns pour le format et validation √† √©viter

- **Validation manuelle** : √âviter les contr√¥les manuels ‚Üí **Solution** : Validation automatique ‚Üí **R√®gle √† adopter** : Contr√¥les syst√©matiques via JSON Schema
- **Sch√©mas rigides** : √âviter les sch√©mas non √©volutifs ‚Üí **Solution** : Sch√©mas extensibles ‚Üí **R√®gle √† adopter** : Versioning et compatibilit√© ascendante
- **Identifiants s√©quentiels** : √âviter les formats sugg√©rant un ordre ‚Üí **Solution** : Identifiants al√©atoires ‚Üí **R√®gle √† adopter** : Format `ph_abc123` sans s√©quence

#### √âtat d'impl√©mentation pour le format et validation

üöß [En cours de conception et r√©alisation]

- ‚úÖ **Sch√©ma des phases** : Structure compl√®te avec identifiants al√©atoires
- ‚úÖ **Validation JSON Schema** : Contraintes et patterns d√©finis
- ‚ùå **Autres concepts** : Sch√©mas √† d√©finir progressivement

### Contraintes r√©f√©rentielles et hi√©rarchie des concepts

#### Description d√©taill√©e pour les contraintes r√©f√©rentielles

- [2025-08-16] **PHASES COMME CONCEPT DE R√âF√âRENCE** : Les phases repr√©sentent le niveau le plus √©lev√© dans la hi√©rarchie HERMES2022
- [2025-08-16] **D√âPENDANCES** : Les phases ne sont d√©pendantes que de la m√©thode et de la version HERMES2022, pas de contraintes externes
- [2025-08-16] **R√âF√âRENCEMENT FUTUR** : Les phases seront r√©f√©renc√©es par les autres concepts au fur et √† mesure de l'avancement de la r√©alisation
- [2025-08-16] **VALIDATION D'EXISTENCE** : Les r√©f√©rences vers les phases doivent pointer vers des phases valides selon le sch√©ma JSON

#### Justification pour les contraintes r√©f√©rentielles

- **Hi√©rarchie claire** : Les phases sont le fondement de la m√©thodologie HERMES2022
- **Ind√©pendance** : Pas de d√©pendances externes pour les phases
- **R√©utilisabilit√©** : Les identifiants de phases seront r√©f√©renc√©s par d'autres concepts
- **Validation stricte** : Assure la coh√©rence des r√©f√©rences entre concepts

#### Patterns valid√©s pour les contraintes r√©f√©rentielles

- **Phases comme r√©f√©rence** : Concept de niveau sup√©rieur sans d√©pendances
- **Identifiants uniques** : Format `ph_abc123` pour la tra√ßabilit√©
- **Validation d'existence** : Contr√¥le que les r√©f√©rences pointent vers des phases valides
- **√âvolutivit√©** : Structure pr√™te pour l'ajout de nouveaux concepts r√©f√©ren√ßant les phases

#### Anti-Patterns pour les contraintes r√©f√©rentielles √† √©viter

- **D√©pendances circulaires** : √âviter que les phases d√©pendent d'autres concepts ‚Üí **Solution** : Phases comme concept de r√©f√©rence ‚Üí **R√®gle √† adopter** : Hi√©rarchie claire avec phases au niveau sup√©rieur
- **R√©f√©rences invalides** : √âviter les r√©f√©rences vers des phases inexistantes ‚Üí **Solution** : Validation d'existence ‚Üí **R√®gle √† adopter** : Contr√¥le syst√©matique des r√©f√©rences

#### √âtat d'impl√©mentation pour les contraintes r√©f√©rentielles

üöß [En cours de conception et r√©alisation]

- ‚úÖ **Structure des phases** : D√©finie et impl√©ment√©e
- ‚ùå **R√©f√©rences crois√©es** : √Ä impl√©menter avec les autres concepts

### Hi√©rarchie sp√©cifique des phases HERMES2022 et propri√©t√© "order"

#### Description d√©taill√©e pour la hi√©rarchie des phases HERMES2022

- [2025-08-18] **HI√âRARCHIE OFFICIELLE HERMES2022** : La m√©thodologie HERMES2022 d√©finit une structure hi√©rarchique sp√©cifique des phases avec la phase "Execution" qui regroupe plusieurs sous-phases
- [2025-08-18] **STRUCTURE √Ä DEUX NIVEAUX** :
  - **Niveau 1** : 1=Initiation, 2=Execution, 3=Closure  
  - **Niveau 2** : Execution (2) = 2.1=Concept + 2.2=Implementation + 2.3=Deployment
- [2025-08-18] **PROPRI√âT√â "ORDER" COMPLEXE** : La propri√©t√© "order" doit supporter cette hi√©rarchie √† deux niveaux avec un format "\\d+(\\.\\d+)*" pour permettre 1, 2, 2.1, 2.2, 2.3, 3
- [2025-08-18] **PAGES DE R√âF√âRENCE SP√âCIFIQUES** :
  - Page g√©n√©rale : <https://www.hermes.admin.ch/en/project-management/phases.html>
  - Initiation : <https://www.hermes.admin.ch/en/project-management/phases/initiation.html>
  - Concept : <https://www.hermes.admin.ch/en/project-management/phases/concept.html>
  - Implementation : <https://www.hermes.admin.ch/en/project-management/phases/implementation.html>
  - Deployment : <https://www.hermes.admin.ch/en/project-management/phases/deployment.html>
  - Execution : <https://www.hermes.admin.ch/en/project-management/phases/execution.html>
  - Closure : <https://www.hermes.admin.ch/en/project-management/phases/closure.html>

#### Justification pour la hi√©rarchie des phases HERMES2022

- **Conformit√© m√©thodologique** : Respect exact de la structure officielle HERMES2022
- **Phase composite "Execution"** : Regroupement logique Concept+Implementation+Deployment selon la m√©thodologie
- **Propri√©t√© "order" hi√©rarchique** : N√©cessaire pour repr√©senter correctement la structure √† deux niveaux
- **URLs de r√©f√©rence sp√©cifiques** : Sources officielles pour l'extraction du contexte et de l'articulation

#### Patterns valid√©s pour la hi√©rarchie des phases HERMES2022

- **Order hi√©rarchique** : Format "1", "2", "2.1", "2.2", "2.3", "3" selon pattern "\\d+(\\.\\d+)*"
- **Phase composite** : Type "composite" pour Execution, type "simple" pour les autres
- **Extraction par URL** : Une URL sp√©cifique par phase pour extraction du contexte
- **Contexte g√©n√©ral** : Page g√©n√©rale phases.html pour articulation d'ensemble

#### Anti-Patterns pour la hi√©rarchie des phases HERMES2022 √† √©viter

- **Order s√©quentiel simple** : √âviter 1,2,3,4,5,6 qui ne respecte pas la hi√©rarchie ‚Üí **Solution** : Hi√©rarchie √† deux niveaux ‚Üí **R√®gle √† adopter** : Format "\\d+(\\.\\d+)*"
- **URLs g√©n√©riques** : √âviter l'extraction depuis la page g√©n√©rale uniquement ‚Üí **Solution** : URLs sp√©cifiques par phase ‚Üí **R√®gle √† adopter** : Une URL par phase pour le contexte d√©taill√©
- **Description litt√©rale fixe** : √âviter description pr√©d√©finie dans le sch√©ma ‚Üí **Solution** : Structure pour contenu extractible ‚Üí **R√®gle √† adopter** : Description comme string avec contraintes de validation

#### √âtat d'impl√©mentation pour la hi√©rarchie des phases HERMES2022

üöß [En cours de sp√©cification et r√©alisation]

### Structure du sch√©ma JSON pour extraction optimis√©e

#### Description d√©taill√©e pour la structure du sch√©ma JSON

- [2025-08-18] **STRUCTURE DESCRIPTION** : La propri√©t√© "description" est d√©finie comme structure pour contenu extractible (string, pattern, required)
- [2025-08-18] **EXTRACTION CONTEXTE** : La description contient le contexte et l'articulation extraits des pages sp√©cifiques HERMES2022
- [2025-08-18] **CONTRAINTES DE VALIDATION** : Longueur minimale/maximale, patterns de validation pour assurer la qualit√© du contenu extrait
- [2025-08-18] **INTEROP√âRABILIT√â** : Structure compatible avec les modules de chargement Archimate et Neo4j

#### Justification pour la structure du sch√©ma JSON

- **Extraction IA optimis√©e** : Permet l'extraction effective du contenu depuis les pages HERMES2022
- **Contexte riche** : Capture l'articulation g√©n√©rale et le contexte sp√©cifique de chaque phase
- **Validation qualit√©** : Contraintes pour assurer la pertinence du contenu extrait
- **Interop√©rabilit√©** : Structure compatible avec les modules de chargement Archimate et Neo4j

#### Patterns valid√©s pour la structure du sch√©ma JSON

- **Description extractible** : Type string avec contraintes minLength/maxLength appropri√©es
- **Validation pattern** : Contraintes sur le format et la qualit√© du contenu
- **Champs required** : Description obligatoire pour chaque phase extraite
- **M√©tadonn√©es extraction** : Source, date, version pour tra√ßabilit√©

#### Anti-Patterns pour la structure du sch√©ma JSON √† √©viter

- **Description pr√©d√©finie** : √âviter les litt√©raux fixes dans le sch√©ma ‚Üí **Solution** : Structure extractible ‚Üí **R√®gle √† adopter** : Description comme contenu variable valid√©
- **Contraintes trop strictes** : √âviter des patterns trop rigides ‚Üí **Solution** : Contraintes adapt√©es au contenu HERMES2022 ‚Üí **R√®gle √† adopter** : Validation √©quilibr√©e qualit√©/flexibilit√©

#### √âtat d'impl√©mentation pour la structure du sch√©ma JSON

üöß [En cours de sp√©cification et r√©alisation]

### Gestion d'archive et tra√ßabilit√©

#### Description d√©taill√©e pour la gestion d'archive

- [2025-08-16] Un syst√®me d'archive est mis en place pour conserver l'historique des extractions
- [2025-08-16] Chaque extraction est dat√©e et versionn√©e pour assurer la tra√ßabilit√©
- [2025-08-16] L'archive permet la comparaison et l'analyse des √©volutions des concepts HERMES2022

#### Justification pour la gestion d'archive

- **Tra√ßabilit√©** : Suivi des √©volutions des concepts HERMES2022
- **Audit** : Possibilit√© de revenir sur des versions ant√©rieures
- **Analyse** : Comparaison des extractions pour identifier les changements
- **Conformit√©** : Respect des exigences de tra√ßabilit√© du projet

#### Patterns valid√©s pour la gestion d'archive

- **Versioning automatique** : Num√©rotation automatique des versions
- **M√©tadonn√©es** : Informations de contexte pour chaque extraction
- **Compression** : Optimisation de l'espace de stockage
- **Indexation** : Recherche et acc√®s facilit√©s aux archives

#### Anti-Patterns pour la gestion d'archive √† √©viter

- **Perte d'historique** : √âviter de perdre les extractions pass√©es ‚Üí **Solution** : Syst√®me d'archive ‚Üí **R√®gle √† adopter** : Conservation syst√©matique des versions
- **Archive non structur√©e** : √âviter le stockage non organis√© ‚Üí **Solution** : Structure hi√©rarchique ‚Üí **R√®gle √† adopter** : Organisation par date et concept

#### √âtat d'impl√©mentation pour la gestion d'archive

üöß [En cours de conception et r√©alisation]
