---
description: "Sp√©cification g√©n√©rale du module hermes2022-extraction-files"
alwaysApply: true
---

# specification-hermes2022-extraction-files.mdc: Sp√©cification g√©n√©rale du module hermes2022-extraction-files

Chemin : hermes2022-to-archimate/shared/hermes2022-extraction-files/.cursor/rules/

> Cr√©√© le : 2025-08-16  
> Derni√®re mise √† jour : 2025-08-16

## Description g√©n√©rale

- Le module hermes2022-extraction-files est un module partag√© qui centralise la gestion des fichiers interm√©diaires produits par l'extraction des concepts HERMES2022
- Il fournit la structure, les sch√©mas de validation et les donn√©es partag√©es entre les modules d'extraction, de chargement Archimate et de chargement Neo4j
- Il assure la coh√©rence et la validit√© des donn√©es √©chang√©es entre les diff√©rents modules du projet

## Contexte

- Sp√©cification amont @.cursor/rules/specification-hermes2022-to-archimate.mdc
- Module consomm√© par hermes2022-concepts-site-extraction, archimate-model-loader et hermes2022-ia-loader
- Interface de donn√©es standardis√©e pour l'ensemble du projet

## Objectifs

- Centraliser la d√©finition des structures de donn√©es interm√©diaires pour les concepts HERMES2022
- Assurer la validation et la coh√©rence des donn√©es √©chang√©es entre modules
- Fournir un r√©f√©rentiel unique et maintenable pour les sch√©mas de donn√©es
- Faciliter la tra√ßabilit√© et l'historisation des extractions

## Conception g√©n√©rale

- Architecture modulaire avec s√©paration claire des responsabilit√©s
- Interface standardis√©e bas√©e sur JSON Schema pour la validation
- Gestion d'archive pour conserver l'historique des extractions
- Structure extensible pour supporter l'√©volution des besoins

## Structure de r√©pertoire

| √âl√©ment | Type | Description |
|:--------|:-----|:------------|
| `/.cursor/rules/` | R√©pertoire | Sp√©cifications selon la gouvernance des r√®gles |
| `/config/` | R√©pertoire | Sch√©mas JSON Schema pour validation des fichiers interm√©diaires |
| `/data/` | R√©pertoire | Fichiers de donn√©es courantes et actives |
| `/data/archive/` | R√©pertoire | Historique des extractions pass√©es conserv√©es |

## D√©cisions architecturales et techniques

### Structure modulaire des fichiers interm√©diaires

#### Description d√©taill√©e pour la structure modulaire

- [2025-08-16] Les fichiers interm√©diaires sont organis√©s selon une structure modulaire respectant le principe de s√©gr√©gation des domaines
- [2025-08-16] Chaque concept HERMES2022 (phases, sc√©narios, modules, t√¢ches, r√©sultats, r√¥les) dispose de sa propre sp√©cification et de ses propres sch√©mas
- [2025-08-16] La structure est con√ßue pour faciliter la maintenance et l'√©volution ind√©pendante de chaque concept

#### Justification pour la structure modulaire

- **Maintenabilit√©** : √âvolution ind√©pendante de chaque concept sans impact sur les autres
- **Lisibilit√©** : Organisation claire facilitant la compr√©hension et la maintenance
- **Extensibilit√©** : Ajout facile de nouveaux concepts sans modification de l'architecture existante
- **Coh√©rence** : Respect du principe de s√©gr√©gation des domaines

#### Patterns valid√©s pour la structure modulaire

- **Un sch√©ma par concept** : `/config/{concept}-schema.json` pour chaque concept HERMES2022
- **Sp√©cifications s√©par√©es** : `/config/specification-{concept}.md` pour chaque concept
- **Donn√©es organis√©es** : `/data/{concept}/` pour les donn√©es de chaque concept
- **Archive structur√©e** : `/data/archive/{YYYY-MM-DD}/` pour l'historique

#### Anti-Patterns pour la structure modulaire √† √©viter

- **Sch√©ma monolithique** : √âviter un seul fichier schema complexe ‚Üí **Solution** : Modularit√© par concept ‚Üí **R√®gle √† adopter** : Un sch√©ma par domaine pour faciliter la maintenance
- **M√©lange des responsabilit√©s** : √âviter de m√©langer sp√©cifications, sch√©mas et donn√©es ‚Üí **Solution** : S√©paration par r√©pertoires ‚Üí **R√®gle √† adopter** : Structure modulaire avec responsabilit√©s distinctes

#### √âtat d'impl√©mentation pour la structure modulaire

üöß [En cours de conception et r√©alisation]

### Format et validation des fichiers interm√©diaires

#### Description d√©taill√©e pour le format et validation

- [2025-08-16] Les fichiers interm√©diaires utilisent le format JSON avec validation JSON Schema
- [2025-08-16] Chaque concept dispose de son propre sch√©ma de validation pour assurer la coh√©rence des donn√©es
- [2025-08-16] La validation est automatique et syst√©matique avant toute consommation par les modules avals

#### Justification pour le format et validation

- **Format JSON** : Lisibilit√© humaine et machine, interop√©rabilit√© universelle
- **JSON Schema** : Validation structurelle automatis√©e, documentation int√©gr√©e
- **Validation syst√©matique** : Garantie de la qualit√© et de la coh√©rence des donn√©es
- **Tra√ßabilit√©** : Contr√¥le automatis√© des donn√©es √©chang√©es

#### Patterns valid√©s pour le format et validation

- **Validation automatique** : Contr√¥les de coh√©rence avant consommation
- **Sch√©mas auto-document√©s** : Documentation int√©gr√©e dans les sch√©mas
- **Gestion d'erreurs** : Traitement syst√©matique des donn√©es invalides
- **Logs de validation** : Tra√ßabilit√© des validations effectu√©es

#### Anti-Patterns pour le format et validation √† √©viter

- **Validation manuelle** : √âviter les contr√¥les manuels ‚Üí **Solution** : Validation automatique ‚Üí **R√®gle √† adopter** : Contr√¥les syst√©matiques via JSON Schema
- **Sch√©mas rigides** : √âviter les sch√©mas non √©volutifs ‚Üí **Solution** : Sch√©mas extensibles ‚Üí **R√®gle √† adopter** : Versioning et compatibilit√© ascendante

#### √âtat d'impl√©mentation pour le format et validation

üöß [En cours de conception et r√©alisation]

### Gestion d'archive et tra√ßabilit√©

#### Description d√©taill√©e pour la gestion d'archive

- [2025-08-16] Un syst√®me d'archive est mis en place pour conserver l'historique des extractions
- [2025-08-16] Chaque extraction est dat√©e et versionn√©e pour assurer la tra√ßabilit√©
- [2025-08-16] L'archive permet la comparaison et l'analyse des √©volutions des concepts HERMES2022

#### Justification pour la gestion d'archive

- **Tra√ßabilit√©** : Suivi des √©volutions des concepts HERMES2022
- **Audit** : Possibilit√© de revenir sur des versions ant√©rieures
- **Analyse** : Comparaison des extractions pour identifier les changements
- **Conformit√©** : Respect des exigences de tra√ßabilit√© du projet

#### Patterns valid√©s pour la gestion d'archive

- **Versioning automatique** : Num√©rotation automatique des versions
- **M√©tadonn√©es** : Informations de contexte pour chaque extraction
- **Compression** : Optimisation de l'espace de stockage
- **Indexation** : Recherche et acc√®s facilit√©s aux archives

#### Anti-Patterns pour la gestion d'archive √† √©viter

- **Perte d'historique** : √âviter de perdre les extractions pass√©es ‚Üí **Solution** : Syst√®me d'archive ‚Üí **R√®gle √† adopter** : Conservation syst√©matique des versions
- **Archive non structur√©e** : √âviter le stockage non organis√© ‚Üí **Solution** : Structure hi√©rarchique ‚Üí **R√®gle √† adopter** : Organisation par date et concept

#### √âtat d'impl√©mentation pour la gestion d'archive

üöß [En cours de conception et r√©alisation]
